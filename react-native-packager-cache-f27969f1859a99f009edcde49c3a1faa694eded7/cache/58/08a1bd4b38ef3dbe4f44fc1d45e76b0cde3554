Object.defineProperty(exports, "__esModule", {
  value: true
});
var googleApiUrl = 'https://maps.google.com/maps/api/geocode/json';

exports.default = {
  apiKey: null,

  setApiKey: function setApiKey(apiKey) {
    this.apiKey = apiKey;
  },
  getFromLatLng: function getFromLatLng(lat, lng) {
    var latLng, url;
    return regeneratorRuntime.async(function getFromLatLng$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (this.apiKey) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", Promise.reject(new Error("Provided API key is invalid")));

          case 2:
            if (!(!lat || !lng)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", Promise.reject(new Error("Provided coordinates are invalid")));

          case 4:
            latLng = lat + "," + lng;
            url = googleApiUrl + "?key=" + this.apiKey + "&latlng=" + encodeURI(latLng);
            return _context.abrupt("return", this.handleUrl(url));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  },
  getFromLocation: function getFromLocation(address) {
    var url;
    return regeneratorRuntime.async(function getFromLocation$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (this.apiKey) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", Promise.reject(new Error("Provided API key is invalid")));

          case 2:
            if (address) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", Promise.reject(new Error("Provided address is invalid")));

          case 4:
            url = googleApiUrl + "?key=" + this.apiKey + "&address=" + encodeURI(address);
            return _context2.abrupt("return", this.handleUrl(url));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  },
  handleUrl: function handleUrl(url) {
    var response, json;
    return regeneratorRuntime.async(function handleUrl$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(fetch(url).catch(function (error) {
              return Promise.reject(new Error("Error fetching data"));
            }));

          case 2:
            response = _context3.sent;
            _context3.next = 5;
            return regeneratorRuntime.awrap(response.json().catch(function (error) {
              return Promise.reject(new Error("Error parsing server response"));
            }));

          case 5:
            json = _context3.sent;

            if (!(json.status === 'OK')) {
              _context3.next = 10;
              break;
            }

            return _context3.abrupt("return", json);

          case 10:
            return _context3.abrupt("return", Promise.reject(new Error("Server returned status code " + json.status)));

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }
};