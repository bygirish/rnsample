Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _nativeBase = require('native-base');

var _reactRedux = require('react-redux');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _ewtimeline = require('../../components/ewtimeline/ewtimeline');

var _ewtimeline2 = babelHelpers.interopRequireDefault(_ewtimeline);

var _utils = require('../../utils');

var _ewuserinfo = require('../../components/ewuser/ewuserinfo');

var _ewuserinfo2 = babelHelpers.interopRequireDefault(_ewuserinfo);

var _ewbar = require('../../components/ewbar/ewbar');

var _ewbar2 = babelHelpers.interopRequireDefault(_ewbar);

var _ewh1text = require('../../components/ewh1text/ewh1text');

var _ewh1text2 = babelHelpers.interopRequireDefault(_ewh1text);

var _ewbutton = require('../../components/ewbutton/ewbutton');

var _ewbutton2 = babelHelpers.interopRequireDefault(_ewbutton);

var _ewh2text = require('../../components/ewh2text/ewh2text');

var _ewh2text2 = babelHelpers.interopRequireDefault(_ewh2text);

var _ewh3text = require('../../components/ewh3text/ewh3text');

var _ewh3text2 = babelHelpers.interopRequireDefault(_ewh3text);

var _ewtext = require('../../components/ewtext/ewtext');

var _ewtext2 = babelHelpers.interopRequireDefault(_ewtext);

var _ewscreentitle = require('../../components/ewscreentitle/ewscreentitle');

var _ewscreentitle2 = babelHelpers.interopRequireDefault(_ewscreentitle);

var _ewaccordion = require('../../components/ewaccordion/ewaccordion');

var _ewaccordion2 = babelHelpers.interopRequireDefault(_ewaccordion);

var _ewfloatinglabel = require('../../components/ewfloatinglabel/ewfloatinglabel');

var _ewfloatinglabel2 = babelHelpers.interopRequireDefault(_ewfloatinglabel);

var _ewreportissue = require('../../components/ewreportissue/ewreportissue');

var _ewreportissue2 = babelHelpers.interopRequireDefault(_ewreportissue);

var _ewapplytravelscreen = require('./ewapplytravelscreen');

var _ewapplytravelscreen2 = babelHelpers.interopRequireDefault(_ewapplytravelscreen);

var _commonactions = require('../../services/common/commonactions');

var _ewmytravelactionscreenstyles = require('./styles/ewmytravelactionscreenstyles');

var _ewmytravelactionscreenstyles2 = babelHelpers.interopRequireDefault(_ewmytravelactionscreenstyles);

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var _travelerrorhandling = require('../../services/travel/travelerrorhandling');

var travelError = babelHelpers.interopRequireWildcard(_travelerrorhandling);

var _travelactions = require('./../../services/travel/travelactions');

var _travelutils = require('./travelutils');

var travelConstants = babelHelpers.interopRequireWildcard(_travelutils);

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _animationutils = require('../../utils/animationutils');

var animationUtils = babelHelpers.interopRequireWildcard(_animationutils);

var _screennameidentifiers = require('../../utils/screennameidentifiers');

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var FILE_NAME = "ewmytravelactionscreen.js : ";

var SCREEN_NAME = "My Travel Action Screen";

var SCREEN_CATEGORY = modules.MODULE_TRAVEL_AND_EXPENSE;

var EwMyTravelActionScreen = function (_Component) {
  babelHelpers.inherits(EwMyTravelActionScreen, _Component);

  function EwMyTravelActionScreen(props) {
    babelHelpers.classCallCheck(this, EwMyTravelActionScreen);


    console.log(FILE_NAME + "In constructor");

    var _this = babelHelpers.possibleConstructorReturn(this, (EwMyTravelActionScreen.__proto__ || Object.getPrototypeOf(EwMyTravelActionScreen)).call(this, props));

    _this.updateActionButtonState = function (actionButtonState) {

      _this.setState({

        areActionButtonsVisible: actionButtonState
      });
    };

    _this.renderActionButtons = function (pendingTravelInformation) {

      console.log(FILE_NAME + "In renderActionButtons");

      var Status = pendingTravelInformation.otherDetails.Status;


      if (_this.state.areActionButtonsVisible && _this.state.currentMode == travelConstants.VIEW_MODE) {

        if (Status == travelConstants.STATUS_PENDING_APPROVAL) {

          return _react2.default.createElement(
            _reactNative.View,
            { style: _ewmytravelactionscreenstyles2.default.footerContainerStyle },
            _react2.default.createElement(_ewbutton2.default, {
              label: travelConstants.CANCEL_TRAVEL_ACTION_LABEL,
              onButonClicked: function onButonClicked() {
                return _this.showCancelTravelDialog();
              }
            }),
            _react2.default.createElement(_ewbutton2.default, {
              label: travelConstants.MODIFY_TRAVEL_ACTION_LABEL,
              customStyle: { marginLeft: appstyleguide.DEFAULT_LEFT_MARGIN },
              onButonClicked: function onButonClicked() {
                return _this.changeCurrentMode();
              }
            })
          );
        }
      }
    };

    _this.changeCurrentMode = function () {

      _this.setState({

        currentMode: travelConstants.EDIT_MODE,
        isTravelCancelled: false
      });
    };

    _this.showCancelTravelDialog = function () {

      console.log(FILE_NAME + "In showCancelTravelDialog method");

      if (_this.state.isTravelCancelled && _this.localValidation()) {

        _reactNative.Alert.alert('Travel Request', 'Do you really want to cancel your travel request?', [{ text: 'No', onPress: function onPress() {
            return console.log('Cancel Pressed');
          }, style: 'cancel' }, { text: 'Yes', onPress: function onPress() {
            return _this.onPressAction(travelConstants.CANCEL_TRAVEL_ACTION);
          } }]);
      } else {

        _this.setState({

          isTravelCancelled: true
        });
      }
    };

    _this.getTravelActionText = function (travelAction) {

      actionText = '';

      if (travelAction == travelConstants.CANCEL_TRAVEL_ACTION) actionText = travelConstants.CANCEL_TRAVEL_ACTION_LABEL;

      return actionText;
    };

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentMessage = function () {

      console.log(FILE_NAME + "In clearCurrentMessage method");

      _this.setState({
        currentError: ''
      });
    };

    tracker.trackScreenView(SCREEN_NAME);

    _this.initialState = {

      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      isTravelCancelled: false,
      cancellationText: "",

      pendingTravelInformation: null,

      currentMode: travelConstants.VIEW_MODE,

      areActionButtonsVisible: false,

      componentInitializeTime: new Date().getTime()

    };

    _this.state = _this.initialState;

    return _this;
  }

  babelHelpers.createClass(EwMyTravelActionScreen, [{
    key: 'componentWillMount',
    value: function componentWillMount(props) {

      console.log(FILE_NAME + "In componentWillMount");

      if (this.props.isMyTravelDataAvailable) {

        this.setState({
          isDataPreLoaded: true,
          isLoading: false,
          pendingTravelInformation: this.props.isMyTravelDataAvailable
        });
      } else {

        var params = {

          requestId: this.props.myTravelData.pi_Txn_Id
        };

        this.props.getPendingTravelInformation(params);

        this.setState({
          isDataPreLoaded: false,
          isLoading: true
        });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ");
      console.log(nextProps);

      if (nextProps.travelActionData != null && nextProps.travelActionError == null) {

        console.log(FILE_NAME + "Action Successfull");

        this.setState({
          isDone: true,
          isLoading: false,
          currentError: ''
        });

        this.props.updateTotalActivityCount(null);
      }

      if (nextProps.travelActionData == null && nextProps.travelActionError != null) {

        console.log(FILE_NAME + "Action Not Successfull");

        this.setState({
          isDone: false,
          isLoading: false,
          currentError: nextProps.travelActionError
        });
      }

      if (nextProps.pendingTravelInformationData != null && nextProps.pendingTravelInformationError == null) {

        this.setState({
          isLoading: false,
          isDataPreLoaded: true,
          pendingTravelInformation: nextProps.pendingTravelInformationData

        });
      }

      if (nextProps.pendingTravelInformationData == null && nextProps.pendingTravelInformationError != null) {

        this.setState({
          isLoading: false,
          isDataPreLoaded: false
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render() Method");

      if (this.props.isLoggedIn) {
        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");
          return _react2.default.createElement(_ewloadingindicator2.default, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {
            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              this.showUserActionAlertMessage();

              _reactNativeRouterFlux.Actions.pop({ type: _reactNativeRouterFlux.ActionConst.REFRESH });
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");
                tracker.trackScreenView('Travel Action Screen');

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);
                tracker.trackScreenView('Travel Action Screen with Error - ' + this.state.currentError);
                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);
            return this.handleError();
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount");

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      if (this.state.isDone && this.state.currentError == '') {

        console.log(FILE_NAME + "Action Successfull");

        var params = {
          "0": 'CLEAR_STATE_DATA_ALL'
        };

        this.props.clearTravelStateData(params);
      }
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {

      console.log(FILE_NAME + "In renderScreen");

      console.log("TRavel State is my travel ", this.state);

      var pendingTravelInformation = this.state.pendingTravelInformation;


      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Header,
          null,
          _react2.default.createElement(
            _nativeBase.Left,
            { style: { flex: 0.5 } },
            _react2.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                } },
              _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            { style: { flex: 2 } },
            _react2.default.createElement(_ewscreentitle2.default, {
              text: 'My Travel'
            })
          ),
          _react2.default.createElement(
            _nativeBase.Right,
            null,
            _react2.default.createElement(_ewreportissue2.default, {
              screenId: _screennameidentifiers.PENDING_TRAVEL_ACTION_ID
            })
          )
        ),
        this.renderTravelView(pendingTravelInformation),
        this.renderCancelFloatingLabel(),
        this.showFooterTab(pendingTravelInformation)
      );
    }
  }, {
    key: 'renderCancelFloatingLabel',
    value: function renderCancelFloatingLabel() {
      var _this2 = this;

      if (this.state.isTravelCancelled) {

        return _react2.default.createElement(
          _reactNative.View,
          { style: { margin: appstyleguide.DEFAULT_MARGIN } },
          _react2.default.createElement(_ewfloatinglabel2.default, {
            label: 'Cancellation Reason',
            placeholderlabel: 'Reason for Cancellation',
            autoCorrect: false,
            autofocus: true,
            autoCapitalize: 'none',
            onChangeText: function onChangeText(newText) {
              return _this2.setState({ cancellationText: newText });
            },
            value: this.state.cancellationText
          })
        );
      }
    }
  }, {
    key: 'handleError',
    value: function handleError() {

      console.log(FILE_NAME + "In handleError method");

      console.log("this.state.currentError", this.state.currentError);

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:
          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }

          break;

        case travelError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {
        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (this.state.currentError) {

          case travelError.SERVER_EXCEPTION:
            this.showAlertMessage(travelError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:
            this.showAlertMessage();
            return this.renderScreen();

        }
      }
    }
  }, {
    key: 'showUserActionAlertMessage',
    value: function showUserActionAlertMessage() {
      var travelActionData = this.props.travelActionData;


      if (travelActionData != null) {

        var action = travelActionData["action"];

        switch (action) {

          case travelConstants.CANCEL_TRAVEL_ACTION:
            this.showAlertMessage('Successfully ', 'Travel Cancelled', 'success');

            break;

          case travelConstants.MODIFY_TRAVEL_ACTION:
            this.showAlertMessage('Successfully ', 'Travel Modified', 'success');

            break;
          default:

        }
      }
    }
  }, {
    key: 'renderTravelView',
    value: function renderTravelView(pendingTravelInformation) {

      if (pendingTravelInformation != null) {

        pendingTravelInformation['currentMode'] = this.state.currentMode;

        return _react2.default.createElement(_ewapplytravelscreen2.default, {
          travelData: pendingTravelInformation,
          actionsButtonVisible: this.state.areActionButtonsVisible,
          updateActionButtonState: this.updateActionButtonState.bind(this)
        });
      }
    }
  }, {
    key: 'showFooterTab',
    value: function showFooterTab(pendingTravelInformation) {

      console.log(FILE_NAME + "In showFooterTab method");

      return this.renderActionButtons(pendingTravelInformation);
    }
  }, {
    key: 'localValidation',
    value: function localValidation() {
      var cancellationText = this.state.cancellationText;


      if (cancellationText == "") {

        this.showAlertMessage(travelConstants.CANCELLATION_REASON_EMPTY);
        return false;
      }

      return true;
    }
  }, {
    key: 'onPressAction',
    value: function onPressAction(action) {

      console.log(FILE_NAME + "In onPressAction method");

      tracker.trackEvent(SCREEN_CATEGORY, 'travel action taken - ' + this.getTravelActionText(action));

      var _state = this.state,
          pendingTravelInformation = _state.pendingTravelInformation,
          cancellationText = _state.cancellationText;
      var advanceDetails = pendingTravelInformation.advanceDetails,
          travelList = pendingTravelInformation.travelList,
          otherDetails = pendingTravelInformation.otherDetails,
          accomodationDetails = pendingTravelInformation.accomodationDetails,
          conveyanceDetails = pendingTravelInformation.conveyanceDetails;


      var params = {

        "Travel": {
          "Travel_Data": {

            "Travel_Details": {
              "Travel_Details_Line_Item": travelList
            },

            "action": action,
            "token": this.props.sessionToken,
            "device_id": _utils.DEVICE_ID,
            "Can_Reason": this.state.cancellationText
          }
        }
      };

      if (accomodationDetails.length != 0) {

        var accomodationDetail = {

          "Accommodation_Details": {
            "Accommodation_Details_Line_Item": accomodationDetails
          }
        };

        babelHelpers.extends(params.Travel.Travel_Data, accomodationDetail);
      }

      if (advanceDetails.length != 0) {

        var advanceDetail = {

          "Advance_details": {
            "Advance_details_line_item": advanceDetails
          }
        };

        babelHelpers.extends(params.Travel.Travel_Data, advanceDetail);
      }

      if (conveyanceDetails.length != 0) {

        var conveyanceDetail = {

          "Convey_Details": {
            "Convey_Details_Line_Item": conveyanceDetails
          }
        };

        babelHelpers.extends(params.Travel.Travel_Data, conveyanceDetail);
      }

      babelHelpers.extends(params.Travel.Travel_Data, otherDetails);

      console.log("travel params are ", JSON.stringify(params));
      this.props.travelAction(params);

      this.setState({
        isLoading: true,
        isDone: false
      });
    }
  }]);
  return EwMyTravelActionScreen;
}(_react.Component);

function bindAction(dispatch) {

  console.log(FILE_NAME + "In bindAction method");

  return {
    getPendingTravelInformation: function getPendingTravelInformation(params) {
      return dispatch((0, _travelactions.getPendingTravelInformation)(params));
    },
    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    },
    updateTotalActivityCount: function updateTotalActivityCount(params) {
      return dispatch((0, _commonactions.updateTotalActivityCount)(params));
    },

    clearTravelStateData: function clearTravelStateData(params) {
      return dispatch((0, _travelactions.clearTravelStateData)(params));
    },
    travelAction: function travelAction(params) {
      return dispatch((0, _travelactions.travelAction)(params));
    }
  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {

    isLoggedIn: state.auth.isLoggedIn,
    sessionToken: state.auth.sessionToken,

    pendingNeedToActData: state.needtoact.needToActData,

    pendingTravelInformationData: state.travel.pendingTravelInformationData,
    pendingTravelInformationError: state.travel.pendingTravelInformationError,

    travelActionData: state.travel.travelActionData,
    travelActionError: state.travel.travelActionError

  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindAction)(EwMyTravelActionScreen);