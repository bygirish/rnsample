Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeCodePush = require('react-native-code-push');

var _reactNativeCodePush2 = babelHelpers.interopRequireDefault(_reactNativeCodePush);

var _nativeBase = require('native-base');

var _reactNativeModalbox = require('react-native-modalbox');

var _reactNativeModalbox2 = babelHelpers.interopRequireDefault(_reactNativeModalbox);

var _reactNativeFcm = require('react-native-fcm');

var _reactNativeFcm2 = babelHelpers.interopRequireDefault(_reactNativeFcm);

var _EwAppNavigator = require('./EwAppNavigator');

var _EwAppNavigator2 = babelHelpers.interopRequireDefault(_EwAppNavigator);

var _ProgressBar = require('./components/loaders/ProgressBar');

var _ProgressBar2 = babelHelpers.interopRequireDefault(_ProgressBar);

var _pushcontroller = require('./pushcontroller');

var _pushcontroller2 = babelHelpers.interopRequireDefault(_pushcontroller);

var _baseTheme = require('./themes/base-theme');

var _baseTheme2 = babelHelpers.interopRequireDefault(_baseTheme);

var _PushNotificationsController = require('./services/appnotifications/PushNotificationsController');

var _ewcomponents = require('./utils/ewcomponents');

var PushNotification = require('react-native-push-notification');

var FILE_NAME = "App.js : ";
var styles = _reactNative.StyleSheet.create({

  container: {
    flex: 1,
    width: null,
    height: null
  },

  modal: {
    justifyContent: 'center',
    alignItems: 'center'
  },

  modal1: {
    height: 300
  }

});

var App = function (_Component) {
  babelHelpers.inherits(App, _Component);

  function App(props) {
    babelHelpers.classCallCheck(this, App);

    var _this = babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

    console.log(FILE_NAME + "In constructor");

    _reactNative.UIManager.setLayoutAnimationEnabledExperimental && _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);

    _this.state = {
      showDownloadingModal: false,
      showInstalling: false,
      downloadProgress: 0
    };
    return _this;
  }

  babelHelpers.createClass(App, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      console.log(FILE_NAME + "In componentDidMount method");

      _reactNativeCodePush2.default.sync({ updateDialog: false, installMode: _reactNativeCodePush2.default.InstallMode.ON_NEXT_RESTART }, function (status) {

        console.log(FILE_NAME + "statuofcodepush", status);

        switch (status) {

          case _reactNativeCodePush2.default.SyncStatus.UP_TO_DATE:

            console.log(FILE_NAME + "Up-to-date.");
            break;

          case _reactNativeCodePush2.default.SyncStatus.CHECKING_FOR_UPDATE:

            console.log(FILE_NAME + "Checking for updates.");
            break;

          case _reactNativeCodePush2.default.SyncStatus.DOWNLOADING_PACKAGE:

            console.log(FILE_NAME + "Downloading package.");

            break;

          case _reactNativeCodePush2.default.SyncStatus.INSTALLING_UPDATE:
            console.log(FILE_NAME + "Installing update.");

            break;

          case _reactNativeCodePush2.default.SyncStatus.UPDATE_INSTALLED:
            console.log(FILE_NAME + "Update installed.");


            break;

          default:
            break;
        }
      }, function (_ref) {
        var receivedBytes = _ref.receivedBytes,
            totalBytes = _ref.totalBytes;

        _this2.setState({ downloadProgress: receivedBytes / totalBytes * 100 });
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount method");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render method", this.state);

      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.View,
          { style: { justifyContent: 'center', alignItems: 'stretch', flex: 1 } },
          _react2.default.createElement(_pushcontroller2.default, null),
          _react2.default.createElement(_EwAppNavigator2.default, null)
        )
      );
    }
  }, {
    key: 'renderDownloadingModal',
    value: function renderDownloadingModal() {

      if (this.state.showDownloadingModal) {

        return _react2.default.createElement(
          EWModal,
          {
            onBackButtonPress: function onBackButtonPress() {},
            isModalVisible: this.state.showDownloadingModal,
            onBackdropPress: function onBackdropPress() {}
          },
          _react2.default.createElement(
            _nativeBase.View,
            { style: { justifyContent: 'center', padding: 20 } },
            this.state.showInstalling ? _react2.default.createElement(
              _nativeBase.Text,
              { style: { color: _baseTheme2.default.brandPrimary, textAlign: 'center', marginBottom: 15, fontSize: 15 } },
              'Installing update...'
            ) : _react2.default.createElement(
              _nativeBase.View,
              { style: { justifyContent: 'center', padding: 20 } },
              _react2.default.createElement(
                _nativeBase.Text,
                { style: { color: _baseTheme2.default.brandPrimary, textAlign: 'center', marginBottom: 15, fontSize: 15 } },
                'Downloading update... ',
                parseInt(this.state.downloadProgress, 10) + ' %'
              ),
              _react2.default.createElement(_ProgressBar2.default, { color: 'theme.brandPrimary', progress: parseInt(this.state.downloadProgress, 10) })
            )
          )
        );
      }
    }
  }, {
    key: 'setUpFCM',
    value: function setUpFCM() {
      var _this3 = this;

      console.log(FILE_NAME + "In setUpFCM method");

      _reactNativeFcm2.default.requestPermissions();

      _reactNativeFcm2.default.getFCMToken().then(function (token) {

        console.log(FILE_NAME + "In getFCMToken method");
        console.log("Push Notification Token is ", token);
      });

      this.notificationListener = _reactNativeFcm2.default.on(_reactNativeFcm.FCMEvent.Notification, function _callee(notif) {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log("Notification is -", notif);

                if (notif.local_notification) {
                  console.log("Local Notification - ", notif.local_notification);
                }

                if (notif.opened_from_tray) {
                  console.log("Notification Opened from tray- ", notif.opened_from_tray);
                }

                if (!(_reactNative.Platform.OS === 'ios')) {
                  _context.next = 13;
                  break;
                }

                _context.t0 = notif._notificationType;
                _context.next = _context.t0 === _reactNativeFcm.NotificationType.Remote ? 7 : _context.t0 === _reactNativeFcm.NotificationType.NotificationResponse ? 9 : _context.t0 === _reactNativeFcm.NotificationType.WillPresent ? 11 : 13;
                break;

              case 7:
                notif.finish(_reactNativeFcm.RemoteNotificationResult.NewData);return _context.abrupt('break', 13);

              case 9:
                notif.finish();
                return _context.abrupt('break', 13);

              case 11:
                notif.finish(_reactNativeFcm.WillPresentNotificationResult.All);return _context.abrupt('break', 13);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, null, _this3);
      });

      this.refreshTokenListener = _reactNativeFcm2.default.on(_reactNativeFcm.FCMEvent.RefreshToken, function (token) {

        console.log("FCM Token is ", token);
      });
    }
  }]);
  return App;
}(_react.Component);

App = (0, _reactNativeCodePush2.default)(App);

exports.default = App;