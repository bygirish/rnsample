Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EwFeedbackScreen = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _reactNativeNavigationReduxHelpers = require('react-native-navigation-redux-helpers');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _reactNativeImageCropPicker = require('react-native-image-crop-picker');

var _reactNativeImageCropPicker2 = babelHelpers.interopRequireDefault(_reactNativeImageCropPicker);

var _ewcomponents = require('../../utils/ewcomponents');

var _commonactions = require('../../services/common/commonactions');

var _commonutils = require('./commonutils');

var commonConstants = babelHelpers.interopRequireWildcard(_commonutils);

var _screennameidentifiers = require('../../utils/screennameidentifiers');

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _commonerrorhandling = require('../../services/common/commonerrorhandling');

var commonError = babelHelpers.interopRequireWildcard(_commonerrorhandling);

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _utils = require('../../utils');

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var FILE_NAME = "ewfeedbackscreen.js : ";

var SCREEN_NAME = "Create Feedback Screen";

var SCREEN_CATEGORY = modules.MODULE_FEEDBACK;

var PICKER_ISSUE_KEY = "PICKER_ISSUE_KEY";

var PICKER_SCREEN_NAME_KEY = "PICKER_SCREEN_NAME_KEY";

var supportEmail = "support@employwise.com";

var issueType = [{
  label: 'Select Issue Type',
  value: -1
}, {
  label: 'Error',
  value: _screennameidentifiers.ISSUE_ERROR_ID
}, {
  label: 'Improvement Suggestion',
  value: _screennameidentifiers.ISSUE_IMPROVEMENT_ID
}, {
  label: 'New Feature Request',
  value: _screennameidentifiers.ISSUE_NEW_FEATURE_ID
}];

var screenNames = [];

var EwFeedbackScreen = exports.EwFeedbackScreen = function (_Component) {
  babelHelpers.inherits(EwFeedbackScreen, _Component);

  function EwFeedbackScreen(props, context) {
    babelHelpers.classCallCheck(this, EwFeedbackScreen);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwFeedbackScreen.__proto__ || Object.getPrototypeOf(EwFeedbackScreen)).call(this, props, context));

    _this.handleBackButtonPress = function () {

      console.log(FILE_NAME + "Inside handleBackButtonPress");

      _reactNativeRouterFlux.Actions.pop();

      return true;
    };

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      if (_this.state.currentError != '') _this.clearCurrentError();

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentError = function () {

      _this.setState({
        currentError: ''
      });

      _this.props.clearCommonError(null);
    };

    console.log(FILE_NAME + "In constructor");

    tracker.trackScreenView(SCREEN_NAME);

    screenId = -1;

    elementValues = _this.handleElementValues();

    filteredScreenNames = elementValues.screenNames;

    if (_this.props.screenId != null) screenId = _this.props.screenId;

    _this.initialState = {

      isDataPreLoaded: true,
      isLoading: false,
      isDone: false,
      currentError: '',

      description: '',
      imagesArray: [],

      selectedIssue: -1,
      selectedScreen: screenId,
      filteredScreenNames: filteredScreenNames,
      imagePath: null,

      componentInitializeTime: new Date().getTime()

    };

    _this.state = _this.initialState;

    return _this;
  }

  babelHelpers.createClass(EwFeedbackScreen, [{
    key: 'componentWillMount',
    value: function componentWillMount(props) {

      console.log(FILE_NAME + "In componentWillMount");
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (nextProps.createUserFeedbackStatusData != null && nextProps.createUserFeedbackStatusError == null) {

        this.setState({
          isDone: true,
          isLoading: false,
          currentError: ''
        });

        this.clearAppFeedbackReduxData();
      }

      if (nextProps.createUserFeedbackStatusData == null && nextProps.createUserFeedbackStatusError != null) {

        this.setState({
          isDone: false,
          isLoading: false,
          currentError: nextProps.createUserFeedbackStatusError
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render method");

      if (this.props.isLoggedIn) {

        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");

          return _react2.default.createElement(_ewcomponents.EwLoadingIndicator, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              {
                this.showAlertMessage('Successfully', 'Issue Reported ', 'success');
              }

              _reactNativeRouterFlux.Actions.pop();
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);
                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);

            return this.handleError();

            return null;
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");

      _reactNative.BackHandler.addEventListener('hardwareBackPress', this.handleBackButtonPress);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      console.log(FILE_NAME + "In componentWillUnmount");

      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.handleBackButtonPress);
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {
      var _this2 = this;

      console.log(FILE_NAME + "In renderScreen");
      console.log("feedback state is ", this.state);

      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Header,
          null,
          _react2.default.createElement(
            _nativeBase.Left,
            null,
            _react2.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                } },
              _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            { style: { flex: 3 } },
            _react2.default.createElement(_ewcomponents.EwScreenTitle, {
              text: 'Report an Issue'
            })
          )
        ),
        _react2.default.createElement(
          _nativeBase.Content,
          null,
          _react2.default.createElement(_ewcomponents.EwBar, {
            customStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN }
          }),
          _react2.default.createElement(
            _reactNative.View,
            { style: { alignItems: "center", justifyContent: "center" } },
            _react2.default.createElement(_ewcomponents.EwH2Text, {
              text: 'Help us in improving experience for you',
              customStyle: { margin: 10 }
            })
          ),
          _react2.default.createElement(_ewcomponents.EwBar, {
            customStyle: { marginBottom: 20 }
          }),
          _react2.default.createElement(
            _reactNative.View,
            { style: { margin: appstyleguide.DEFAULT_MARGIN } },
            _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
              pickerLabel: 'Issue Type',
              isDefaultPickerValueSelected: this.state.selectedIssue == -1,
              dataArray: issueType,
              selectedValue: this.state.selectedIssue,
              onPickerValueChange: function onPickerValueChange(newPickerValue) {
                return _this2.onDropdownValueChange(commonConstants.PICKER_ISSUE_KEY, newPickerValue);
              }
            }),
            _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
              pickerLabel: 'Screen',
              isDefaultPickerValueSelected: this.state.selectedScreen == -1,
              customViewStyle: { marginTop: 20 },
              dataArray: this.state.filteredScreenNames,
              selectedValue: this.state.selectedScreen,
              onPickerValueChange: function onPickerValueChange(newPickerValue) {
                return _this2.onDropdownValueChange(commonConstants.PICKER_SCREEN_NAME_KEY, newPickerValue);
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: 20 } },
              _react2.default.createElement(_ewcomponents.EwFloatingLabel, {
                placeholderlabel: 'Please describe issue here in detail',
                label: 'Issue Description',
                autoCorrect: false,
                onChangeText: function onChangeText(description) {
                  return _this2.setState({ description: description });
                },
                value: this.state.description
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { backgroundColor: appstyleguide.APP_LIGHT_GRAY, marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              _react2.default.createElement(_ewcomponents.EwImageSlider, {

                initialState: this.state.imagesArray,
                openGallery: true,
                isAddButtonVisible: true,
                isDeleteButtonVisible: true,
                defaultImageText: 'Attach Screenshot',
                updateParentState: function updateParentState(componentState) {
                  return _this2.updateFeedbackState(commonConstants.IMAGE_SLIDER_ID, componentState);
                },
                sliderHeight: _utils.DEVICE_HEIGHT * 0.4,
                imageWidth: _utils.DEVICE_WIDTH * 0.5
              })
            ),
            _react2.default.createElement(_ewcomponents.EwButton, {
              label: 'Submit',
              customStyle: { marginTop: 20, alignSelf: "center" },
              onButonClicked: function onButonClicked() {
                return _this2.onSubmitButtonPressed();
              }
            })
          )
        )
      );
    }
  }, {
    key: 'updateFeedbackState',
    value: function updateFeedbackState(componentKey, data) {

      switch (componentKey) {

        case commonConstants.IMAGE_SLIDER_ID:

          this.setState({

            imagesArray: [].concat(babelHelpers.toConsumableArray(data))
          });
          break;

        default:
      }
    }
  }, {
    key: 'openCamera',
    value: function openCamera() {
      var _this3 = this;

      _reactNativeImageCropPicker2.default.openCamera({
        width: _utils.DEVICE_HEIGHT,
        height: _utils.DEVICE_HEIGHT,
        cropping: true,
        includeBase64: true,
        compressImageQuality: 0.8
      }).then(function (image) {

        console.log("imageProperties from Camera - ", image);

        _this3.setState({

          imagePath: image.path
        });
      }).catch(function (err) {
        if (err == "Error: Cannot find image data") Alert.alert("Error", "Upload correct format");
      });
    }
  }, {
    key: 'getModuleName',
    value: function getModuleName(selectedScreen) {

      for (var _iterator = Object.keys(_screennameidentifiers.screenNameDropdown), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var screenModuleId = _ref;


        for (var _iterator2 = _screennameidentifiers.screenNameDropdown[screenModuleId], _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var screenName = _ref2;

          if (selectedScreen == screenName.value) return screenModuleId;
        }
      }
    }
  }, {
    key: 'handleElementValues',
    value: function handleElementValues() {

      updatedScreenNames = [{
        label: "Select screen name",
        value: _screennameidentifiers.DEFAULT_DROPDOWN_VALUE
      }];

      for (var _iterator3 = Object.keys(_screennameidentifiers.screenNameDropdown), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var screenModuleId = _ref3;


        if (this.props.pendingNeedToActData.moduleSubscribed.moduleId.includes(parseInt(screenModuleId))) updatedScreenNames = updatedScreenNames.concat(_screennameidentifiers.screenNameDropdown[screenModuleId]);
      }

      console.log("updatedScreenNames", updatedScreenNames);

      elementValues = {

        screenNames: updatedScreenNames
      };

      return elementValues;
    }
  }, {
    key: 'handleError',
    value: function handleError(errorMessage) {

      console.log(FILE_NAME + "In handleError");

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      console.log("this.state.currentError", this.state.currentError);

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:
          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }


          break;

        case commonError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {

        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (errorMessage) {

          case commonError.SERVER_EXCEPTION:
            this.showAlertMessage(commonError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:
            this.showAlertMessage();
            return this.renderScreen();}
      }
    }
  }, {
    key: 'clearAppFeedbackReduxData',
    value: function clearAppFeedbackReduxData() {

      var params = {

        0: 'CLEAR_STATE_APP_FEEDBACK_DATA'
      };

      this.props.clearCommonStateData(params);
    }
  }, {
    key: 'onSubmitButtonPressed',
    value: function onSubmitButtonPressed() {

      console.log("Inside onSubmitButtonPressed");

      if (this.doLocalValidation()) {
        var _state = this.state,
            description = _state.description,
            selectedIssue = _state.selectedIssue,
            selectedScreen = _state.selectedScreen;


        tracker.trackEvent(SCREEN_CATEGORY, 'issue reported');

        var params = {

          "issue_type": issueType[selectedIssue].label,
          "screen_name": this.getScreenName(selectedScreen),
          "description": description,
          "priority": this.getIssuePriority(selectedIssue),
          "moduleId": this.getModuleName(parseInt(selectedScreen)),
          "imageArray": this.state.imagesArray
        };

        console.log("params are - ", params);
        this.props.createUserFeedback(params);

        this.setState({
          isLoading: true
        });
      }
    }
  }, {
    key: 'getIssuePriority',
    value: function getIssuePriority(selectedIssue) {

      priority = 1;

      switch (selectedIssue) {
        case _screennameidentifiers.ISSUE_ERROR_ID:

          priority = 3;

          break;

        case _screennameidentifiers.ISSUE_IMPROVEMENT_ID:

          priority = 2;
          break;

        default:

      }

      return priority;
    }
  }, {
    key: 'getScreenName',
    value: function getScreenName(selectedScreen) {

      screenName = "";

      for (var _iterator4 = this.state.filteredScreenNames, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var screenName = _ref4;


        if (screenName.value == selectedScreen) {

          screenName = screenName.label;
          break;
        }
      }

      return screenName;
    }
  }, {
    key: 'doLocalValidation',
    value: function doLocalValidation() {

      console.log("Inside doLocalValidation");

      var _state2 = this.state,
          selectedIssue = _state2.selectedIssue,
          selectedScreen = _state2.selectedScreen,
          description = _state2.description;


      if (selectedIssue == -1) {

        this.showAlertMessage(commonConstants.ISSUE_SELECTED_ERROR);

        return false;
      }

      if (selectedScreen == -1) {

        this.showAlertMessage(commonConstants.SCREEN_NAME_ERROR);

        return false;
      }

      if (description == '') {

        this.showAlertMessage(commonConstants.DESCRIPTION_ERROR);

        return false;
      }

      return true;
    }
  }, {
    key: 'onDropdownValueChange',
    value: function onDropdownValueChange(pickerKey, newPickerValue) {

      console.log("Inside onDropdownValueChange");

      switch (pickerKey) {

        case commonConstants.PICKER_ISSUE_KEY:

          this.setState({
            selectedIssue: newPickerValue

          });
          break;

        case commonConstants.PICKER_SCREEN_NAME_KEY:

          this.setState({
            selectedScreen: newPickerValue

          });
          break;

        default:

      }
    }
  }]);
  return EwFeedbackScreen;
}(_react.Component);

function bindActions(dispatch) {

  return {

    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    },
    createUserFeedback: function createUserFeedback(params) {
      return dispatch((0, _commonactions.createUserFeedback)(params));
    },
    clearCommonError: function clearCommonError(params) {
      return dispatch((0, _commonactions.clearCommonError)(params));
    },
    clearCommonStateData: function clearCommonStateData(params) {
      return dispatch((0, _commonactions.clearCommonStateData)(params));
    }

  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {

    isLoggedIn: state.auth.isLoggedIn,

    emailId: state.auth.emailId,

    createUserFeedbackStatusData: state.common.createUserFeedbackStatusData,
    createUserFeedbackStatusError: state.common.createUserFeedbackStatusError,

    pendingNeedToActData: state.needtoact.needToActData

  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindActions)(EwFeedbackScreen);