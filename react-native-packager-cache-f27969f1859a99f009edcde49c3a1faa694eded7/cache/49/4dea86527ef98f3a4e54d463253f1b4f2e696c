Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require('react-native');

var _nativeBase = require('native-base');

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _utils = require('../../../../utils');

var _ewimages = require('../../../../utils/ewimages');

var _ewbutton = require('../../../../components/ewbutton/ewbutton');

var _ewbutton2 = babelHelpers.interopRequireDefault(_ewbutton);

var _ewicon = require('../../../../components/ewicon/ewicon');

var _ewicon2 = babelHelpers.interopRequireDefault(_ewicon);

var _appstyleguide = require('../../../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);


var FILE_NAME = "ewmultipleexpense.js";

var EwMultipleExpense = function (_Component) {
  babelHelpers.inherits(EwMultipleExpense, _Component);

  function EwMultipleExpense(props, context) {
    babelHelpers.classCallCheck(this, EwMultipleExpense);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwMultipleExpense.__proto__ || Object.getPrototypeOf(EwMultipleExpense)).call(this, props, context));

    _this.initialState = {

      componentStateArray: [].concat(babelHelpers.toConsumableArray(_this.props.componentStateArray))

    };

    _this.state = _this.initialState;
    return _this;
  }

  babelHelpers.createClass(EwMultipleExpense, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log("Inside componentWillMount");
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (this.isStateChanged(nextProps.componentStateArray)) {

        this.setState({

          componentStateArray: [].concat(babelHelpers.toConsumableArray(nextProps.componentStateArray))
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {

      console.log(FILE_NAME + "In componentWillUpdate Method");
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = babelHelpers.objectWithoutProperties(this.props, []);
      var componentStateArray = this.state.componentStateArray;


      console.log(" props received are ", this.props, this.componentState);

      console.log(" multiple state is ", this.state);

      return _react2.default.createElement(
        _reactNative.View,
        null,
        Object.keys(componentStateArray).map(function (key, stateIndex) {
          return _this2.renderComponentView(key);
        })
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");

      console.log("props after update", this.props, this.state);

      if (this.isStateChanged(this.props.componentStateArray)) {

        console.log("Updating master screen", this.state.componentKey);
        this.props.updateParentState(this.state.componentStateArray, this.state.componentKey);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount");
    }
  }, {
    key: 'renderComponentView',
    value: function renderComponentView(componentKey) {
      var _this3 = this;

      var _props = this.props,
          component = _props.component,
          isDeleteButtonVisible = _props.isDeleteButtonVisible;


      console.log("componentKey", componentKey, this.state.componentStateArray[componentKey]);

      return _react2.default.createElement(
        _reactNative.View,
        null,
        _react2.default.createElement(
          _reactNative.View,
          { style: { flexDirection: "row", margin: appstyleguide.DEFAULT_MARGIN } },
          _react2.default.createElement(
            _reactNative.View,
            { style: { flex: 0.8 } },
            _react2.default.cloneElement(component, {
              index: componentKey,
              initialState: this.state.componentStateArray[componentKey],
              updateParentState: function updateParentState(componentState) {
                return _this3.updateParentState(componentKey, componentState);
              },
              otherProps: this.props.otherProps
            })
          ),
          _react2.default.createElement(
            _reactNative.View,
            { style: { alignItems: "flex-end", margin: appstyleguide.DEFAULT_MARGIN, flex: 0.1 } },
            _react2.default.createElement(_ewicon2.default, {
              iconSource: this.props.viewIconVisible ? _ewimages.RIGHT_ARROW_ICON : _ewimages.EDIT_ICON,
              onIconPressed: function onIconPressed() {
                return _this3.editComponent(componentKey);
              }
            })
          ),
          isDeleteButtonVisible ? _react2.default.createElement(
            _reactNative.View,
            { style: { alignItems: "flex-end", marginTop: appstyleguide.DEFAULT_TOP_MARGIN, flex: 0.1 } },
            _react2.default.createElement(_ewicon2.default, {
              iconSource: _ewimages.DELETE_ICON,
              onIconPressed: function onIconPressed() {
                return _this3.showDeleteAlertBox(componentKey);
              }
            })
          ) : null
        )
      );
    }
  }, {
    key: 'editComponent',
    value: function editComponent(componentKey) {

      this.props.onEditButtonClicked(componentKey);

      console.log("component key is ", componentKey);
    }
  }, {
    key: 'showDeleteAlertBox',
    value: function showDeleteAlertBox(componentKey) {
      var _this4 = this;

      if (this.props.showDeleteAlertbox) {
        var _props$alertboxData = this.props.alertboxData,
            heading = _props$alertboxData.heading,
            message = _props$alertboxData.message;


        _reactNative.Alert.alert(heading, message, [{ text: 'Ok', onPress: function onPress() {
            return _this4.performDeleteAction(componentKey);
          } }, { text: 'Cancel' }]);
      } else this.performDeleteAction(componentKey);
    }
  }, {
    key: 'performDeleteAction',
    value: function performDeleteAction(componentKey) {
      var deleteAction;
      return regeneratorRuntime.async(function performDeleteAction$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:

              console.log("Inside deleteComponent ", componentKey);

              if (!(this.props.onDeleteButtonPressed != null)) {
                _context.next = 8;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(this.props.onDeleteButtonPressed(componentKey));

            case 4:
              deleteAction = _context.sent;


              if (deleteAction) {

                this.deleteComponent(componentKey);
              } else console.log("No need to delete");

              _context.next = 9;
              break;

            case 8:

              this.deleteComponent(componentKey);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'deleteComponent',
    value: function deleteComponent(componentKey) {

      updatedComponentStateArray = [].concat(babelHelpers.toConsumableArray(this.state.componentStateArray));

      updatedComponentStateArray.splice(componentKey, 1);

      console.log("updatedComponentStateArrayafterdelete", updatedComponentStateArray);

      this.setState({
        componentStateArray: updatedComponentStateArray
      });
    }
  }, {
    key: 'isStateChanged',
    value: function isStateChanged(initialState) {

      if (JSON.stringify(initialState) != JSON.stringify(this.getMultipleComponentObject())) return true;

      return false;
    }
  }, {
    key: 'getMultipleComponentObject',
    value: function getMultipleComponentObject() {

      return this.state.componentStateArray;
    }
  }]);
  return EwMultipleExpense;
}(_react.Component);

exports.default = EwMultipleExpense;