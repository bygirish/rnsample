Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCompanyModel = getCompanyModel;
exports.getBusinessUnitModel = getBusinessUnitModel;
exports.getLocationModel = getLocationModel;
exports.getFunctionModel = getFunctionModel;
exports.getGradeModel = getGradeModel;
exports.getCostCenterModel = getCostCenterModel;
exports.getAllocationProjectModel = getAllocationProjectModel;
exports.getClientExpenseModel = getClientExpenseModel;
exports.getApproveServerExpenseModel = getApproveServerExpenseModel;
exports.getCommentModel = getCommentModel;

var _utils = require('../../../utils');

var _expenseutils = require('../../../ewscreens/expense/expenseutils');

var expenseConstants = babelHelpers.interopRequireWildcard(_expenseutils);
function getCompanyModel(serverData) {

  for (var _iterator = serverData, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var company = _ref;


    company.label = company.co_name;
    company.value = company.co_id;
  }

  return serverData;
}

function getBusinessUnitModel(serverData) {

  for (var _iterator2 = serverData, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var businessUnit = _ref2;


    businessUnit.label = businessUnit.bu_Name;
    businessUnit.value = businessUnit.bu_Id;
  }

  return serverData;
}

function getLocationModel(serverData) {

  for (var _iterator3 = serverData, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var location = _ref3;


    location.label = location.location_Name;
    location.value = location.location_Id;
  }

  return serverData;
}

function getFunctionModel(serverData) {

  for (var _iterator4 = serverData, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref4;

    if (_isArray4) {
      if (_i4 >= _iterator4.length) break;
      _ref4 = _iterator4[_i4++];
    } else {
      _i4 = _iterator4.next();
      if (_i4.done) break;
      _ref4 = _i4.value;
    }

    var userFunction = _ref4;


    userFunction.label = userFunction.function_Name;
    userFunction.value = userFunction.function_Id;
  }

  return serverData;
}

function getGradeModel(serverData) {

  for (var _iterator5 = serverData, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref5;

    if (_isArray5) {
      if (_i5 >= _iterator5.length) break;
      _ref5 = _iterator5[_i5++];
    } else {
      _i5 = _iterator5.next();
      if (_i5.done) break;
      _ref5 = _i5.value;
    }

    var grade = _ref5;


    grade.label = grade.grade_Name;
    grade.value = grade.grade_Id;
  }

  return serverData;
}

function getCostCenterModel(serverData) {

  for (var _iterator6 = serverData, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref6;

    if (_isArray6) {
      if (_i6 >= _iterator6.length) break;
      _ref6 = _iterator6[_i6++];
    } else {
      _i6 = _iterator6.next();
      if (_i6.done) break;
      _ref6 = _i6.value;
    }

    var costCenter = _ref6;


    costCenter.label = costCenter.costcenter_NAME;
    costCenter.value = costCenter.costcenter_ID;
  }

  return serverData;
}

function getAllocationProjectModel(serverData) {

  projectList = [];

  for (var _iterator7 = serverData, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref7;

    if (_isArray7) {
      if (_i7 >= _iterator7.length) break;
      _ref7 = _iterator7[_i7++];
    } else {
      _i7 = _iterator7.next();
      if (_i7.done) break;
      _ref7 = _i7.value;
    }

    var project = _ref7;


    var projectModel = {

      "projectName": project.project_name,
      "projectId": project.project_id,
      "projectCode": project.project_code,
      "assigned": project.assigned
    };

    projectList.push(projectModel);
  }

  return projectList;
}

function getClientExpenseModel(serverData) {

  var lineitems = (0, _utils.getJsonArray)(serverData.expenses.exp_data.exp_details.lineitem);

  var expenseData = serverData.expenses.exp_data;

  var clientModel = {

    "expenseArray": getExpenseArray(lineitems, expenseData),
    "isReveiwMode": true,
    "expenseId": expenseData.exp_id,
    "Status": expenseData.exp_status,
    "expenseType": expenseData.exp_type,
    "isDeviationCommentVisible": false,
    "deviationComment": "",
    "isApproverScreen": false,
    "employeeCode": expenseData.exp_emp_code,
    "Designation": expenseData.exp_emp_designation,
    "employeeName": expenseData.exp_emp_name,
    "expenseClaimDate": expenseData.exp_claim_date,
    "totalExpenseClaimAmount": expenseData.exp_claim_amt,
    "baseCurrencySymbol": expenseData.base_currency,
    "approverName": expenseData.exp_approver_name,
    "approverDesignation": expenseData.approver_designation,
    "approverEmpCode": expenseData.exp_approver_code
  };

  if (isMileageExpenseType(expenseData)) {

    clientModel["startDate"] = (0, _utils.convertServerDateToMilliseconds)(expenseData.conveyance_start_date);
    clientModel["endDate"] = (0, _utils.convertServerDateToMilliseconds)(expenseData.conveyance_end_date);
  } else {

    clientModel["isExpenseTypeConfigurationAvailable"] = false;
  }

  if (expenseData.time_based_deviation) {

    clientModel.isDeviationCommentVisible = true;
    clientModel.deviationComment = expenseData.time_based_deviation_comment;
  }

  return clientModel;
}

function isMileageExpenseType(expenseData) {

  if (expenseData.exp_type == expenseConstants.SERVER_MILEAGE_EXPENSE_LABEL) return true;

  return false;
}

function getApproveServerExpenseModel(clientData) {

  lineitemArray = [];

  for (var _iterator8 = clientData.expenseArray, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref8;

    if (_isArray8) {
      if (_i8 >= _iterator8.length) break;
      _ref8 = _iterator8[_i8++];
    } else {
      _i8 = _iterator8.next();
      if (_i8.done) break;
      _ref8 = _i8.value;
    }

    var expense = _ref8;


    var lineitemData = {

      "li_appr_cgst_rate": expense.approvedCgstRate,
      "li_appr_cgst_amount": expense.approvedCgstAmount,
      "li_appr_sgst_rate": expense.approvedSgstRate,
      "li_appr_sgst_amount": expense.approvedSgstAmount,
      "li_appr_igst_rate": expense.approvedIgstRate,
      "li_appr_igst_amount": expense.approvedIgstAmount,
      "li_appr_pre_tax_amt": expense.approvedPreTaxAmount,

      "li_appr_tax_amt": expense.approvedTaxAmount,
      "li_appr_amt": expense.approvedAmount,
      "li_log_id": expense.expenseLogId

    };

    lineitemArray.push(lineitemData);
  }

  var params = {

    "expenses": {
      "exp_data": {
        "exp_details": {

          "lineitem": lineitemArray
        },

        "token": clientData.token,
        "device_id": clientData.deviceId,
        "action": clientData.action,
        "exp_id": clientData.expenseId,
        "exp_type": clientData.expenseType,
        "approver_comment": clientData.approverComment

      }

    }

  };

  return params;
}

function getCommentModel(serverData) {

  var commentDetails = [];

  for (var _iterator9 = serverData, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref9;

    if (_isArray9) {
      if (_i9 >= _iterator9.length) break;
      _ref9 = _iterator9[_i9++];
    } else {
      _i9 = _iterator9.next();
      if (_i9.done) break;
      _ref9 = _i9.value;
    }

    var comment = _ref9;


    var commentModel = {

      "comment": comment.comment
    };

    commentDetails.push(commentModel);
  }

  var newCommentModel = {

    "comment": ""
  };

  commentDetails.push(newCommentModel);

  return commentDetails;
}

function getExpenseArray(lineitems, expenseData) {

  var expenseArray = [];

  for (var _iterator10 = lineitems, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref10;

    if (_isArray10) {
      if (_i10 >= _iterator10.length) break;
      _ref10 = _iterator10[_i10++];
    } else {
      _i10 = _iterator10.next();
      if (_i10.done) break;
      _ref10 = _i10.value;
    }

    var lineitem = _ref10;


    var expenseModel = {

      "invoiceNumber": lineitem.li_inv_no,
      "expenseDateInMilliseconds": (0, _utils.convertServerDateToMilliseconds)(lineitem.li_date),
      "expenseAmount": lineitem.li_claim_amt,
      "expenseLogId": lineitem.li_id,
      "isDeviationCommentVisible": false,
      "deviationComment": "",
      "approvedAmount": lineitem.li_appr_amt.toString()

    };

    if (isMileageExpenseType(expenseData)) {

      expenseModel["travelMode"] = lineitem.li_mode_id;
      expenseModel["expensePurpose"] = lineitem.li_purpose;
      expenseModel["source"] = lineitem.li_from_to;
      expenseModel["destination"] = "";
      expenseModel["distanceCovered"] = "";

      if (lineitem.li_distance != null) expenseModel.distanceCovered = lineitem.li_distance;

      if (lineitem.li_work_type != null) {

        expenseModel["workTypeDetails"] = getWorkTypeDetails(lineitem);
      }
    } else {

      expenseModel["paymentMode"] = lineitem.li_pymode;
      expenseModel["expenseCurrency"] = lineitem.li_curr_id;
      expenseModel["expenseDate"] = {};
      expenseModel["expenseDate"].value = (0, _utils.convertServerDateToMilliseconds)(lineitem.li_date);
      expenseModel["expenseTypeInfo"] = {};
      expenseModel["expenseTypeInfo"].expenseType = lineitem.li_head_type_id;
      expenseModel["expenseTypeInfo"].expenseTypeConfiguration = {};
      expenseModel["otherCustomFieldValues"] = lineitem.otherCustomFieldValues == null ? [] : lineitem.otherCustomFieldValues;
    }

    if (lineitem.li_deviation_comment != null && lineitem.li_deviation_comment != "") {

      expenseModel.isDeviationCommentVisible = true;
      expenseModel.deviationComment = lineitem.li_deviation_comment;
    }

    if (lineitem.Comment_details != null) {

      expenseModel["commentDetails"] = getCommentDetails(lineitem);
    }

    expenseModel["allocationDetails"] = getAllocationDetails(lineitem);

    imagesArray = [];

    if (lineitem.invoiceImage != null) {
      imagesArray.push(lineitem.invoiceImage);
    }

    expenseModel["imagesArray"] = imagesArray;

    if (expenseData.pretax_posttax) {

      expenseModel["invoiceDetails"] = getInvoiceDetails(lineitem, expenseData);
      expenseModel.invoiceDetails["imagesArray"] = imagesArray;
    }

    expenseArray.push(expenseModel);
  }

  return expenseArray;
}

function getWorkTypeDetails(lineitem) {

  workTypeDetails = {};

  workTypeDetails.isClientWork = false;
  workTypeDetails.clientDetails = [];

  if (lineitem.li_work_type == "Client") {

    workTypeDetails.isClientWork = true;

    if (lineitem.Client_details != null && lineitem.Client_details != "") {

      serverClientModel = (0, _utils.getJsonArray)(lineitem.Client_details.Client_details_line_item);

      for (var _iterator11 = serverClientModel, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref11;

        if (_isArray11) {
          if (_i11 >= _iterator11.length) break;
          _ref11 = _iterator11[_i11++];
        } else {
          _i11 = _iterator11.next();
          if (_i11.done) break;
          _ref11 = _i11.value;
        }

        var clientDetail = _ref11;


        var clientModel = {

          clientAccount: clientDetail.Account_Name,
          clientAccountId: clientDetail.Account_Id,
          clientProject: clientDetail.Project_Id,
          accountProjectsData: []
        };

        workTypeDetails.clientDetails.push(clientModel);
      }
    }
  }

  return workTypeDetails;
}

function getCommentDetails(lineitem) {

  commentDetails = [];

  for (var _iterator12 = lineitem.Comment_details.Comment_details_line_item, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref12;

    if (_isArray12) {
      if (_i12 >= _iterator12.length) break;
      _ref12 = _iterator12[_i12++];
    } else {
      _i12 = _iterator12.next();
      if (_i12.done) break;
      _ref12 = _i12.value;
    }

    var commentDetail = _ref12;


    var commentModel = {

      "comment": commentDetail.comment
    };

    commentDetails.push(commentModel);
  }

  return commentDetails;
}

function getAllocationDetails(lineitem) {

  allocationDetails = {

    companyId: lineitem.li_company_id,
    businessUnitId: lineitem.li_bu_id,
    locationId: lineitem.li_location_id,
    functionId: lineitem.li_function_id,
    gradeId: lineitem.li_grade_id,
    costCenterId: lineitem.li_costcenter_id,
    projectDetails: [],
    companyList: [],
    businessUnitList: [],
    locationList: [],
    functionList: [],
    gradeList: [],
    costCenterList: [],
    apiCounter: 0
  };

  if (lineitem.Allocation_project != null && lineitem.Allocation_project != "") {

    projectDetails = [];

    var allocationProjectDetails = (0, _utils.getJsonArray)(lineitem.Allocation_project.Allocation_project_details);

    for (var _iterator13 = allocationProjectDetails, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref13;

      if (_isArray13) {
        if (_i13 >= _iterator13.length) break;
        _ref13 = _iterator13[_i13++];
      } else {
        _i13 = _iterator13.next();
        if (_i13.done) break;
        _ref13 = _i13.value;
      }

      var projectDetail = _ref13;


      var selectedProjectData = {

        "project_id": projectDetail.project_id,
        "project_code": projectDetail.project_code,
        "assigned": projectDetail.assigned
      };

      var projectModel = {

        "projectAmount": projectDetail.amount,
        "projectName": projectDetail.project_name,
        "selectedProjectData": selectedProjectData
      };

      projectDetails.push(projectModel);
    }

    allocationDetails["projectDetails"] = projectDetails;
  }

  return allocationDetails;
}

function getInvoiceDetails(lineitem, expenseData) {

  taxConfiguration = {};
  taxConfiguration["isVendorNameVisible"] = false;
  taxConfiguration["isSachcnCodeVisible"] = false;
  taxConfiguration["isbenficiaryGstVisible"] = false;

  invoiceDetails = {

    "invoiceDate": (0, _utils.convertServerDateToMilliseconds)(lineitem.li_invoice_date),
    "preTaxAmount": lineitem.li_pre_tax_amt,
    "postTaxAmount": lineitem.li_claim_amt,
    "invoiceNumber": lineitem.li_inv_no,
    "isExchangeRateVisible": false,
    "taxConfiguration": taxConfiguration,
    "isbeneficiaryDropdownVisible": false,
    "isPaymentDropdownVisible": false,
    "isExchangeRateVisible": false,
    "exchangeRate": "",
    "isGstCharged": true

  };

  if (!isMileageExpenseType(expenseData)) {

    invoiceDetails["isExchangeRateVisible"] = true;
    invoiceDetails["isPaymentDropdownVisible"] = true;
    invoiceDetails["paymentMode"] = lineitem.li_pymode;
    invoiceDetails["expenseCurrency"] = lineitem.li_curr_id;
  }

  var vendorDetails = {

    "gstinNumber": lineitem.li_gstin_number
  };

  invoiceDetails["vendorDetails"] = vendorDetails;

  var benficiaryDetails = {

    cgstRate: lineitem.li_claimed_cgst_rate,
    approvedCgstRate: lineitem.li_appr_cgst_rate,
    cgstAmount: lineitem.li_claimed_cgst_amount,
    approvedCgstAmount: lineitem.li_appr_cgst_amount,
    igstRate: lineitem.li_claimed_igst_rate,
    approvedIgstRate: lineitem.li_appr_igst_rate,
    igstAmount: lineitem.li_claimed_igst_amount,
    approvedIgstAmount: lineitem.li_appr_igst_amount,
    sgstRate: lineitem.li_claimed_sgst_rate,
    approvedSgstRate: lineitem.li_appr_sgst_rate,
    sgstAmount: lineitem.li_claimed_sgst_amount,
    approvedSgstAmount: lineitem.li_appr_igst_amount,
    beneficiaryGstin: "",
    preTaxAmount: lineitem.li_pre_tax_amt,
    approvedPreTaxAmount: lineitem.li_appr_pre_tax_amt,
    taxAmount: lineitem.li_tax_amt,
    approvedTaxAmount: lineitem.li_appr_tax_amt,

    activeGstView: "",
    isReveiwMode: true
  };

  invoiceDetails["benficiaryDetails"] = benficiaryDetails;

  return invoiceDetails;
}