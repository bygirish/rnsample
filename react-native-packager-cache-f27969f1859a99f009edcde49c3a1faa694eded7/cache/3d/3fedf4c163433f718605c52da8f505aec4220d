Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var WINDOW_HEIGHT = _reactNative.Dimensions.get('window').height;
var WINDOW_WIDTH = _reactNative.Dimensions.get('window').width;
var DRAG_DISMISS_THRESHOLD = 150;
var STATUS_BAR_OFFSET = _reactNative.Platform.OS === 'android' ? -25 : 0;
var isIOS = _reactNative.Platform.OS === 'ios';

var styles = _reactNative.StyleSheet.create({
  background: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: WINDOW_WIDTH,
    height: WINDOW_HEIGHT
  },
  open: {
    position: 'absolute',
    flex: 1,
    justifyContent: 'center',

    backgroundColor: 'transparent'
  },
  header: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: WINDOW_WIDTH,
    backgroundColor: 'transparent'
  },
  closeButton: {
    fontSize: 35,
    color: 'white',
    lineHeight: 40,
    width: 40,
    textAlign: 'center',
    shadowOffset: {
      width: 0,
      height: 0
    },
    shadowRadius: 1.5,
    shadowColor: 'black',
    shadowOpacity: 0.8
  }
});

var LightboxOverlay = function (_Component) {
  babelHelpers.inherits(LightboxOverlay, _Component);

  function LightboxOverlay() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, LightboxOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = LightboxOverlay.__proto__ || Object.getPrototypeOf(LightboxOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isAnimating: false,
      isPanning: false,
      target: {
        x: 0,
        y: 0,
        opacity: 1
      },
      pan: new _reactNative.Animated.Value(0),
      openVal: new _reactNative.Animated.Value(0)
    }, _this.open = function () {
      if (isIOS) {
        _reactNative.StatusBar.setHidden(true, 'fade');
      }
      _this.state.pan.setValue(0);
      _this.setState({
        isAnimating: true,
        target: {
          x: 0,
          y: 0,
          opacity: 1
        }
      });

      _reactNative.Animated.spring(_this.state.openVal, babelHelpers.extends({ toValue: 1 }, _this.props.springConfig)).start(function () {
        return _this.setState({ isAnimating: false });
      });
    }, _this.close = function () {
      if (isIOS) {
        _reactNative.StatusBar.setHidden(false, 'fade');
      }
      _this.setState({
        isAnimating: true
      });
      _reactNative.Animated.spring(_this.state.openVal, babelHelpers.extends({ toValue: 0 }, _this.props.springConfig)).start(function () {
        _this.setState({
          isAnimating: false
        });
        _this.props.onClose();
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(LightboxOverlay, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this._panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {
          return !_this2.state.isAnimating;
        },
        onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {
          return !_this2.state.isAnimating;
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
          return !_this2.state.isAnimating;
        },
        onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
          return !_this2.state.isAnimating;
        },

        onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {
          _this2.state.pan.setValue(0);
          _this2.setState({ isPanning: true });
        },
        onPanResponderMove: _reactNative.Animated.event([null, { dy: this.state.pan }]),
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {
          return true;
        },
        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
          if (Math.abs(gestureState.dy) > DRAG_DISMISS_THRESHOLD) {
            _this2.setState({
              isPanning: false,
              target: {
                y: gestureState.dy,
                x: gestureState.dx,
                opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT)
              }
            });
            _this2.close();
          } else {
            _reactNative.Animated.spring(_this2.state.pan, babelHelpers.extends({ toValue: 0 }, _this2.props.springConfig)).start(function () {
              _this2.setState({ isPanning: false });
            });
          }
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.isOpen) {
        this.open();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (this.props.isOpen != props.isOpen && props.isOpen) {
        this.open();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          isOpen = _props.isOpen,
          renderHeader = _props.renderHeader,
          swipeToDismiss = _props.swipeToDismiss,
          origin = _props.origin,
          backgroundColor = _props.backgroundColor;
      var _state = this.state,
          isPanning = _state.isPanning,
          isAnimating = _state.isAnimating,
          openVal = _state.openVal,
          target = _state.target;


      var lightboxOpacityStyle = {
        opacity: openVal.interpolate({ inputRange: [0, 1], outputRange: [0, target.opacity] })
      };

      var handlers = void 0;
      if (swipeToDismiss) {
        handlers = this._panResponder.panHandlers;
      }

      var dragStyle = void 0;
      if (isPanning) {
        dragStyle = {
          top: this.state.pan
        };
        lightboxOpacityStyle.opacity = this.state.pan.interpolate({ inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT], outputRange: [0, 1, 0] });
      }

      var openStyle = [styles.open, {
        left: openVal.interpolate({ inputRange: [0, 1], outputRange: [origin.x, target.x] }),
        top: openVal.interpolate({ inputRange: [0, 1], outputRange: [origin.y + STATUS_BAR_OFFSET, target.y + STATUS_BAR_OFFSET] }),
        width: openVal.interpolate({ inputRange: [0, 1], outputRange: [origin.width, WINDOW_WIDTH] }),
        height: openVal.interpolate({ inputRange: [0, 1], outputRange: [origin.height, WINDOW_HEIGHT] })
      }];

      var background = _react2.default.createElement(_reactNative.Animated.View, { style: [styles.background, { backgroundColor: backgroundColor }, lightboxOpacityStyle] });
      var header = _react2.default.createElement(
        _reactNative.Animated.View,
        { style: [styles.header, lightboxOpacityStyle] },
        renderHeader ? renderHeader(this.close) : _react2.default.createElement(
          _reactNative.TouchableOpacity,
          { onPress: this.close },
          _react2.default.createElement(
            _reactNative.Text,
            { style: styles.closeButton },
            '\xD7'
          )
        )
      );
      var content = _react2.default.createElement(
        _reactNative.Animated.View,
        babelHelpers.extends({ style: [openStyle, dragStyle] }, handlers),
        this.props.children
      );

      if (this.props.navigator) {
        return _react2.default.createElement(
          _reactNative.View,
          null,
          background,
          content,
          header
        );
      }

      return _react2.default.createElement(
        _reactNative.Modal,
        { visible: isOpen, transparent: true, onRequestClose: function onRequestClose() {
            return _this3.close();
          } },
        background,
        content,
        header
      );
    }
  }]);
  return LightboxOverlay;
}(_react.Component);

LightboxOverlay.propTypes = {
  origin: _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number
  }),
  springConfig: _propTypes2.default.shape({
    tension: _propTypes2.default.number,
    friction: _propTypes2.default.number
  }),
  backgroundColor: _propTypes2.default.string,
  isOpen: _propTypes2.default.bool,
  renderHeader: _propTypes2.default.func,
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  swipeToDismiss: _propTypes2.default.bool
};
LightboxOverlay.defaultProps = {
  springConfig: { tension: 30, friction: 7 },
  backgroundColor: 'black'
};
exports.default = LightboxOverlay;