Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = appNotificationsReducer;

var _appnotificationsactiontypes = require('./appnotificationsactiontypes');

var appNotificationsActionTypes = babelHelpers.interopRequireWildcard(_appnotificationsactiontypes);

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _utils = require('../../utils');

var FILE_NAME = "appNotificationsReducer.js : ";
var initialState = {
  fcmToken: null,
  lastNotificationId: 0,
  tokenUpdatedOnEwServer: false,

  updateFcmTokenStatusData: null,
  updateFcmTokenStatusError: null

};

function appNotificationsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];


  console.log(FILE_NAME + "In appNotificationsReducer method");
  console.log(action.type);
  console.log(state);

  switch (action.type) {
    case appNotificationsActionTypes.SET_FCM_TOKEN:

      console.log("In method appNotificationsReducer SET_FCM_TOKEN");

      return babelHelpers.extends({}, state, {
        fcmToken: action.fcmToken
      });

      break;

    case appNotificationsActionTypes.SUCCESS_UPDATE_FCM_TOKEN:

      console.log("In method appNotificationsReducer SUCCESS_UPDATE_FCM_TOKEN");

      return {
        updateFcmTokenStatusData: action.response.data,
        updateFcmTokenStatusError: action.response.error
      };

      break;

    case appNotificationsActionTypes.FAILURE_UPDATE_FCM_TOKEN:

      console.log("In method appNotificationsReducer FAILURE_UPDATE_FCM_TOKEN");

      return babelHelpers.extends({}, state, {
        updateFcmTokenStatusData: action.response.data,
        updateFcmTokenStatusError: action.response.error

      });

      break;

    case appNotificationsActionTypes.SET_LAST_NOTIFICATION_ID:

      console.log("In method appNotificationsReducer SET_LAST_NOTIFICATION_ID");

      if (action.lastNotificationId == 0) {

        return babelHelpers.extends({}, state, {
          lastNotificationId: 0
        });
      } else {

        return babelHelpers.extends({}, state, {
          lastNotificationId: state.lastNotificationId + 1
        });
      }

      break;

    case appNotificationsActionTypes.CLEAR_APP_NOTIFICATIONS_STATE_DATA:

      console.log("In method appNotificationsReducer CLEAR_APP_NOTIFICATIONS_STATE_DATA");

      return babelHelpers.extends({}, state, {
        fcmToken: null,
        lastNotificationId: 0
      });

      break;

    case _utils.REHYDRATE:

      console.log("In method appNotificationsReducer REHYDRATE");

      return babelHelpers.extends({}, state, action.payload.appnotifications);

      break;

    default:

      console.log("In method appNotificationsReducer NOTHING");

      return babelHelpers.extends({}, state);

  }
}