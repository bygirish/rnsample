Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EwAllocationDetailsScreen = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _reactNativeNavigationReduxHelpers = require('react-native-navigation-redux-helpers');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _commonactions = require('../../services/common/commonactions');

var _ewbar = require('../../components/ewbar/ewbar');

var _ewbar2 = babelHelpers.interopRequireDefault(_ewbar);

var _commonexpenseclaimactions = require('../../services/expenseclaim/common/commonexpenseclaimactions');

var _ewcomponents = require('../../utils/ewcomponents');

var _projectamountview = require('./components/ewallocationcomponents/projectamountview');

var _projectamountview2 = babelHelpers.interopRequireDefault(_projectamountview);

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _animationutils = require('../../utils/animationutils');

var animationUtils = babelHelpers.interopRequireWildcard(_animationutils);

var _utils = require('../../utils');

var _screennameidentifiers = require('../../utils/screennameidentifiers');

var _expenseutils = require('./expenseutils');

var expenseConstant = babelHelpers.interopRequireWildcard(_expenseutils);

var _commonexpenseclaimerrorhandling = require('../../services/expenseclaim/common/commonexpenseclaimerrorhandling');

var expenseError = babelHelpers.interopRequireWildcard(_commonexpenseclaimerrorhandling);

var FILE_NAME = "ewallocationdetailsescreen.js : ";

var SCREEN_NAME = "Allocation Details Screen";

var SCREEN_CATEGORY = modules.MODULE_TRAVEL_AND_EXPENSE;

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var DEFAULT_API_COUNTER = 6;

var EwAllocationDetailsScreen = exports.EwAllocationDetailsScreen = function (_Component) {
  babelHelpers.inherits(EwAllocationDetailsScreen, _Component);

  function EwAllocationDetailsScreen(props, context) {
    babelHelpers.classCallCheck(this, EwAllocationDetailsScreen);


    console.log(FILE_NAME + "In constructor");

    tracker.trackScreenView(SCREEN_NAME);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwAllocationDetailsScreen.__proto__ || Object.getPrototypeOf(EwAllocationDetailsScreen)).call(this, props, context));

    _this.handleBackButtonPress = function () {

      console.log(FILE_NAME + " Inside handleBackButtonPress");

      var isReveiwMode = _this.state.isReveiwMode;


      if (!isReveiwMode) {

        _reactNative.Alert.alert('Allocation Details', 'Do you want to leave without saving ?', [{ text: 'Ok', onPress: function onPress() {
            return _reactNativeRouterFlux.Actions.pop();
          } }, { text: 'Cancel' }]);
      } else _reactNativeRouterFlux.Actions.pop();

      return true;
    };

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      if (_this.state.currentError != '') _this.clearCurrentMessage();

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentMessage = function () {

      _this.setState({
        currentError: ''
      });
    };

    elementValues = _this.handleElementvalues(_this.props.allocationData);

    _this.initialState = {
      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      isReveiwMode: elementValues.isReveiwMode,

      companyList: elementValues.companyList,
      companyId: elementValues.companyId,
      businessUnitList: elementValues.businessUnitList,
      businessUnitId: elementValues.businessUnitId,
      locationList: elementValues.locationList,
      locationId: elementValues.locationId,
      functionList: elementValues.functionList,
      functionId: elementValues.functionId,
      gradeList: elementValues.gradeList,
      gradeId: elementValues.gradeId,
      costCenterList: elementValues.costCenterList,
      costCenterId: elementValues.costCenterId,

      apiCounter: elementValues.apiCounter,
      projectDetails: elementValues.projectDetails,

      componentInitializeTime: new Date().getTime()
    };

    _this.state = _this.initialState;

    return _this;
  }

  babelHelpers.createClass(EwAllocationDetailsScreen, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log(FILE_NAME + "In componentWillMount");

      console.log("this.props.allocationData", this.props.allocationData);

      if (this.props.allocationData.initialState == null || this.props.allocationData.initialState.companyList.length == 0) {

        this.props.getCompanyInformation(null);
        this.props.getBusinessUnitInformation(null);
        this.props.getLocationInformation(null);
        this.props.getFunctionInformation(null);
        this.props.getGradeInformation(null);
        this.props.getCostCenterInformation(null);

        this.setState({
          isDataPreLoaded: false,
          isLoading: true
        });
      } else {

        this.setState({
          isDataPreLoaded: true,
          isLoading: false
        });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (nextProps.companyInformationData != null && nextProps.companyInformationError == null) {

        this.setState({

          companyList: nextProps.companyInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.companyInformationData == null && nextProps.companyInformationError != null) {}

      if (nextProps.businessUnitInformationData != null && nextProps.businessUnitInformationError == null) {

        this.setState({

          businessUnitList: nextProps.businessUnitInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.businessUnitInformationData == null && nextProps.businessUnitInformationError != null) {}

      if (nextProps.locationInformationData != null && nextProps.locationInformationError == null) {

        this.setState({

          locationList: nextProps.locationInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.locationInformationData == null && nextProps.locationInformationError != null) {}

      if (nextProps.functionInformationData != null && nextProps.functionInformationError == null) {

        this.setState({

          functionList: nextProps.functionInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.functionInformationData == null && nextProps.functionInformationError != null) {}

      if (nextProps.gradeInformationData != null && nextProps.gradeInformationError == null) {

        this.setState({

          gradeList: nextProps.gradeInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.gradeInformationData == null && nextProps.gradeInformationError != null) {}

      if (nextProps.costCenterInformationData != null && nextProps.costCenterInformationError == null) {

        this.setState({

          costCenterList: nextProps.costCenterInformationData,
          apiCounter: this.getIncrementedApiCounter()
        });
      }

      if (nextProps.costCenterInformationData == null && nextProps.costCenterInformationError != null) {}
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {

      console.log(FILE_NAME + "In componentWillUpdate");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render() Method");

      if (this.props.isLoggedIn) {

        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");

          return _react2.default.createElement(_ewloadingindicator2.default, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              {
                this.showAlertMessage();
              }
              _reactNativeRouterFlux.Actions.pop({ type: _reactNativeRouterFlux.ActionConst.REFRESH });
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);

                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);

            return this.handleError();
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");

      _reactNative.BackHandler.addEventListener('hardwareBackPress', this.handleBackButtonPress);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");

      console.log("apiCounter", this.state.apiCounter);

      if (this.state.isLoading && this.state.apiCounter == DEFAULT_API_COUNTER) {

        this.setState({
          isLoading: false,
          isDataPreLoaded: true
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount");

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      var params = {
        "0": 'CLEAR_STATE_DATA_ALL'
      };

      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.handleBackButtonPress);
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {
      var _this2 = this;

      console.log(FILE_NAME + "In renderScreen");

      var _state = this.state,
          companyList = _state.companyList,
          companyId = _state.companyId,
          businessUnitList = _state.businessUnitList,
          businessUnitId = _state.businessUnitId,
          locationList = _state.locationList,
          locationId = _state.locationId,
          functionList = _state.functionList,
          functionId = _state.functionId,
          gradeList = _state.gradeList,
          gradeId = _state.gradeId,
          costCenterList = _state.costCenterList,
          costCenterId = _state.costCenterId,
          projectDetails = _state.projectDetails,
          apiCounter = _state.apiCounter,
          isReveiwMode = _state.isReveiwMode;


      console.log(" Curent allocation state ", this.state);

      console.log("allocation props receive", this.props);

      var _props$allocationData = this.props.allocationData.configuration,
          bu_editable_by_requester = _props$allocationData.bu_editable_by_requester,
          company_editable_by_requester = _props$allocationData.company_editable_by_requester,
          costcenter_editable_by_requester = _props$allocationData.costcenter_editable_by_requester,
          function_editable_by_requester = _props$allocationData.function_editable_by_requester,
          grade_editable_by_requester = _props$allocationData.grade_editable_by_requester,
          loc_editable_by_requester = _props$allocationData.loc_editable_by_requester,
          project_mandatory_for_requester = _props$allocationData.project_mandatory_for_requester,
          project_applicable = _props$allocationData.project_applicable;


      if (apiCounter >= DEFAULT_API_COUNTER) {

        return _react2.default.createElement(
          _nativeBase.Container,
          null,
          _react2.default.createElement(
            _nativeBase.Header,
            null,
            _react2.default.createElement(
              _nativeBase.Left,
              null,
              _react2.default.createElement(
                _nativeBase.Button,
                { transparent: true, onPress: function onPress() {
                    return _this2.handleBackButtonPress();
                  } },
                _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
              )
            ),
            _react2.default.createElement(
              _nativeBase.Body,
              { style: { flex: 3 } },
              _react2.default.createElement(_ewcomponents.EwScreenTitle, {
                text: 'Allocation Details'
              })
            ),
            _react2.default.createElement(
              _nativeBase.Right,
              null,
              _react2.default.createElement(_ewcomponents.EwReportIssue, {
                screenId: _screennameidentifiers.CREATE_ALLOCATION_DETAILS_ID
              })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Content,
            { contentContainerStyle: { margin: appstyleguide.DEFAULT_MARGIN } },
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && company_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.COMPANY_LABEL,
                isDefaultPickerValueSelected: companyId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: companyList,
                selectedValue: companyId,
                onPickerValueChange: function onPickerValueChange(companyId) {
                  _this2.setState({ companyId: companyId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.COMPANY_LABEL,
                value: this.getNameByValue(companyList, companyId)
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && bu_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.BUSINESS_UNIT_LABEL,
                customViewStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN },
                isDefaultPickerValueSelected: businessUnitId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: businessUnitList,
                selectedValue: businessUnitId,
                onPickerValueChange: function onPickerValueChange(businessUnitId) {
                  _this2.setState({ businessUnitId: businessUnitId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.BUSINESS_UNIT_LABEL,
                value: this.getNameByValue(businessUnitList, businessUnitId)
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && loc_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.LOCATION_LABEL,
                customViewStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN },
                isDefaultPickerValueSelected: locationId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: locationList,
                selectedValue: locationId,
                onPickerValueChange: function onPickerValueChange(locationId) {
                  _this2.setState({ locationId: locationId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.LOCATION_LABEL,
                value: this.getNameByValue(locationList, locationId)
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && function_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.FUNCTION_LABEL,
                customViewStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN },
                isDefaultPickerValueSelected: functionId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: functionList,
                selectedValue: functionId,
                onPickerValueChange: function onPickerValueChange(functionId) {
                  _this2.setState({ functionId: functionId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.FUNCTION_LABEL,
                value: this.getNameByValue(functionList, functionId)
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && grade_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.GRADE_LABEL,
                customViewStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN },
                isDefaultPickerValueSelected: gradeId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: gradeList,
                selectedValue: gradeId,
                onPickerValueChange: function onPickerValueChange(gradeId) {
                  _this2.setState({ gradeId: gradeId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.GRADE_LABEL,
                value: this.getNameByValue(gradeList, gradeId)
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
              !isReveiwMode && costcenter_editable_by_requester ? _react2.default.createElement(_ewcomponents.EwDropdownPicker, {
                pickerLabel: expenseConstant.COST_CENTER_LABEL,
                customViewStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN },
                isDefaultPickerValueSelected: costCenterId == expenseConstant.DEFAULT_PICKER_VALUE,
                dataArray: costCenterList,
                selectedValue: costCenterId,
                onPickerValueChange: function onPickerValueChange(costCenterId) {
                  _this2.setState({ costCenterId: costCenterId });
                }
              }) : _react2.default.createElement(_ewcomponents.Reveiw, {
                heading: expenseConstant.COST_CENTER_LABEL,
                value: this.getNameByValue(costCenterList, costCenterId)
              })
            ),
            project_applicable ? _react2.default.createElement(_ewcomponents.EwMultipleComponentValue, {
              component: _react2.default.createElement(_projectamountview2.default, null),
              componentStateArray: projectDetails,
              showDeleteAlertbox: true,
              isAddButtonVisible: !isReveiwMode,
              isDeleteButtonVisible: !isReveiwMode,
              alertboxData: expenseConstant.allocationProjectAlertboxData,
              updateParentState: function updateParentState(componentState, componentKey) {
                return _this2.updateAllocationDetailState(expenseConstant.PROJECT_AMOUNT_COMPONENT_ID, componentState, componentKey);
              },
              addLabel: 'Add Project',
              otherDetails: { isReveiwMode: isReveiwMode, projectLabel: this.props.allocationData.configuration.field_label }
            }) : null,
            !isReveiwMode ? _react2.default.createElement(
              _reactNative.View,
              { style: { alignSelf: "center", margin: 20 } },
              _react2.default.createElement(_ewcomponents.EwButton, {
                label: 'Done',
                onButonClicked: function onButonClicked() {
                  return _this2.saveAllocationDetails();
                }
              })
            ) : null
          )
        );
      }

      return null;
    }
  }, {
    key: 'saveAllocationDetails',
    value: function saveAllocationDetails() {

      if (this.localValidation()) {

        this.props.allocationData.updateParentState(this.state);

        _reactNativeRouterFlux.Actions.pop();
      }
    }
  }, {
    key: 'localValidation',
    value: function localValidation() {
      var projectDetails = this.state.projectDetails;
      var _props$allocationData2 = this.props.allocationData.configuration,
          project_applicable = _props$allocationData2.project_applicable,
          project_mandatory_for_requester = _props$allocationData2.project_mandatory_for_requester;


      totalProjectAmount = 0;

      if (project_applicable) {

        for (var _iterator = projectDetails, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var projectDetail = _ref;


          if (project_mandatory_for_requester) {

            if (projectDetail.projectName.trim() == "") {

              this.props.allocationData.showAlertMessage(expenseConstant.ALLOCATION_PROJECT_EMPTY);

              return false;
            }

            if (projectDetail.projectAmount.trim() == "") {

              this.props.allocationData.showAlertMessage(expenseConstant.ALLOCATION_PROJECT_AMOUNT_EMPTY);

              return false;
            }

            if (projectDetail.selectedProjectData == null) {

              this.props.allocationData.showAlertMessage(expenseConstant.ALLOCATION_PROJECT_ID_EMPTY);

              return false;
            }
          }

          if (projectDetail.projectAmount.trim() != "") totalProjectAmount += parseFloat(projectDetail.projectAmount);
        }

        console.log("totalProjectAmount", this.props.allocationData.totalTaxAmount, totalProjectAmount);

        if (totalProjectAmount != 0 && this.props.allocationData.totalTaxAmount.trim() != "") {

          if (totalProjectAmount != this.props.allocationData.totalTaxAmount) {

            this.props.allocationData.showAlertMessage(expenseConstant.TOTAL_PROJECT_AMOUNT_NOT_EQUAL_TO_TAX_AMOUNT);

            return false;
          }
        }
      }

      return true;
    }
  }, {
    key: 'getIncrementedApiCounter',
    value: function getIncrementedApiCounter() {

      updatedApiCounter = this.state.apiCounter;
      updatedApiCounter += 1;
      return updatedApiCounter;
    }
  }, {
    key: 'updateAllocationDetailState',
    value: function updateAllocationDetailState(componentKey, data, dataKey) {

      console.log("Inside updateAllocationDetailState", componentKey, data);

      switch (componentKey) {

        case expenseConstant.PROJECT_AMOUNT_COMPONENT_ID:

          updatedProjectDetails = [].concat(babelHelpers.toConsumableArray(data));

          if (updatedProjectDetails[dataKey] != undefined && updatedProjectDetails[dataKey].isProjectSelected || updatedProjectDetails.length < this.state.projectDetails.length) {

            if (updatedProjectDetails.length == this.state.projectDetails.length) updatedProjectDetails[dataKey].isProjectSelected = false;

            if (this.props.allocationData.totalTaxAmount != "") {

              for (var _iterator2 = updatedProjectDetails, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var projectDetail = _ref2;

                projectDetail.projectAmount = (parseFloat(this.props.allocationData.totalTaxAmount) / updatedProjectDetails.length).toString();
              }
            }
          }

          console.log("updatedProjectDetails", updatedProjectDetails);

          this.setState({

            projectDetails: [].concat(babelHelpers.toConsumableArray(data))
          });

          break;

        default:

      }
    }
  }, {
    key: 'isProjectAmountEqualToTaxAmount',
    value: function isProjectAmountEqualToTaxAmount(data) {

      totalAmount = 0;

      for (var _iterator3 = data, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var project = _ref3;


        totalAmount += parseFloat(project.projectAmount);
      }

      if (totalAmount === this.props.allocationData.totalTaxAmount) return true;

      return false;
    }
  }, {
    key: 'handleElementvalues',
    value: function handleElementvalues(data) {

      companyId = expenseConstant.DEFAULT_PICKER_VALUE;
      businessUnitId = expenseConstant.DEFAULT_PICKER_VALUE;
      locationId = expenseConstant.DEFAULT_PICKER_VALUE;
      functionId = expenseConstant.DEFAULT_PICKER_VALUE;
      gradeId = expenseConstant.DEFAULT_PICKER_VALUE;
      costCenterId = expenseConstant.DEFAULT_PICKER_VALUE;
      projectDetails = [];
      companyList = [];
      businessUnitList = [];
      locationList = [];
      functionList = [];
      gradeList = [];
      costCenterList = [];
      isReveiwMode = false;
      apiCounter = 0;

      if (data.initialState != null) {

        propsData = data.initialState;

        companyId = propsData.companyId;
        businessUnitId = propsData.businessUnitId;
        locationId = propsData.locationId;
        functionId = propsData.functionId;
        gradeId = propsData.gradeId;
        costCenterId = propsData.costCenterId;
        projectDetails = propsData.projectDetails;
        companyList = propsData.companyList;
        businessUnitList = propsData.businessUnitList;
        locationList = propsData.locationList;
        functionList = propsData.functionList;
        gradeList = propsData.gradeList;
        costCenterList = propsData.costCenterList;
        apiCounter = propsData.apiCounter;
        isReveiwMode = propsData.isReveiwMode;
      } else {

        if (data.otherProps != null) {

          propsData = data.otherProps;

          companyId = propsData.company_id;
          businessUnitId = propsData.bu_id;
          locationId = propsData.location_id;
          functionId = propsData.function_id;
          gradeId = propsData.grade_id;
          costCenterId = propsData.emp_costcenter_id;
        }
      }

      elementValues = {

        companyId: companyId,
        businessUnitId: businessUnitId,
        locationId: locationId,
        functionId: functionId,
        gradeId: gradeId,
        costCenterId: costCenterId,
        projectDetails: projectDetails,
        companyList: companyList,
        businessUnitList: businessUnitList,
        locationList: locationList,
        functionList: functionList,
        gradeList: gradeList,
        costCenterList: costCenterList,
        apiCounter: apiCounter,
        isReveiwMode: isReveiwMode

      };

      return elementValues;
    }
  }, {
    key: 'handleError',
    value: function handleError(errorMessage) {

      console.log(FILE_NAME + "In handleError");

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      console.log("this.state.currentError", this.state.currentError);

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:
          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }


          break;

        case expenseError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {

        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (errorMessage) {

          case expenseError.SERVER_EXCEPTION:
            this.showAlertMessage(expenseError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:
            this.showAlertMessage();
            return this.renderScreen();}
      }
    }
  }, {
    key: 'getNameByValue',
    value: function getNameByValue(dataArray, dataId) {

      console.log("getNameByValue", dataArray, dataId);

      for (var _iterator4 = dataArray, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var data = _ref4;


        if (data.value == dataId) return data.label;
      }
    }
  }]);
  return EwAllocationDetailsScreen;
}(_react.Component);

function bindAction(dispatch) {

  console.log(FILE_NAME + "In bindAction");

  return {

    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    },

    getCompanyInformation: function getCompanyInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getCompanyInformation)(params));
    },
    getBusinessUnitInformation: function getBusinessUnitInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getBusinessUnitInformation)(params));
    },
    getLocationInformation: function getLocationInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getLocationInformation)(params));
    },
    getFunctionInformation: function getFunctionInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getFunctionInformation)(params));
    },
    getGradeInformation: function getGradeInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getGradeInformation)(params));
    },
    getCostCenterInformation: function getCostCenterInformation(params) {
      return dispatch((0, _commonexpenseclaimactions.getCostCenterInformation)(params));
    }

  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {
    isLoggedIn: state.auth.isLoggedIn,

    errorCounter: state.commonExpenseClaim.errorCounter,

    companyInformationData: state.commonExpenseClaim.companyInformationData,
    companyInformationError: state.commonExpenseClaim.companyInformationError,

    businessUnitInformationData: state.commonExpenseClaim.businessUnitInformationData,
    businessUnitInformationError: state.commonExpenseClaim.businessUnitInformationError,

    locationInformationData: state.commonExpenseClaim.locationInformationData,
    locationInformationError: state.commonExpenseClaim.locationInformationError,

    functionInformationData: state.commonExpenseClaim.functionInformationData,
    functionInformationError: state.commonExpenseClaim.functionInformationError,

    gradeInformationData: state.commonExpenseClaim.gradeInformationData,
    gradeInformationError: state.commonExpenseClaim.gradeInformationError,

    costCenterInformationData: state.commonExpenseClaim.costCenterInformationData,
    costCenterInformationError: state.commonExpenseClaim.costCenterInformationError

  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindAction)(EwAllocationDetailsScreen);