Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _shallowequal = require('shallowequal');

var _shallowequal2 = babelHelpers.interopRequireDefault(_shallowequal);

var _reactNativeInvertibleScrollView = require('react-native-invertible-scroll-view');

var _reactNativeInvertibleScrollView2 = babelHelpers.interopRequireDefault(_reactNativeInvertibleScrollView);

var _md = require('md5');

var _md2 = babelHelpers.interopRequireDefault(_md);

var _LoadEarlier = require('./LoadEarlier');

var _LoadEarlier2 = babelHelpers.interopRequireDefault(_LoadEarlier);

var _Message = require('./Message');

var _Message2 = babelHelpers.interopRequireDefault(_Message);

var MessageContainer = function (_React$Component) {
  babelHelpers.inherits(MessageContainer, _React$Component);

  function MessageContainer(props) {
    babelHelpers.classCallCheck(this, MessageContainer);

    var _this = babelHelpers.possibleConstructorReturn(this, (MessageContainer.__proto__ || Object.getPrototypeOf(MessageContainer)).call(this, props));

    _this.renderRow = _this.renderRow.bind(_this);
    _this.renderFooter = _this.renderFooter.bind(_this);
    _this.renderLoadEarlier = _this.renderLoadEarlier.bind(_this);
    _this.renderScrollComponent = _this.renderScrollComponent.bind(_this);

    var dataSource = new _reactNative.ListView.DataSource({
      rowHasChanged: function rowHasChanged(r1, r2) {
        return r1.hash !== r2.hash;
      }
    });

    var messagesData = _this.prepareMessages(props.messages);
    _this.state = {
      dataSource: dataSource.cloneWithRows(messagesData.blob, messagesData.keys)
    };
    return _this;
  }

  babelHelpers.createClass(MessageContainer, [{
    key: 'prepareMessages',
    value: function prepareMessages(messages) {
      return {
        keys: messages.map(function (m) {
          return m._id;
        }),
        blob: messages.reduce(function (o, m, i) {
          var previousMessage = messages[i + 1] || {};
          var nextMessage = messages[i - 1] || {};

          var toHash = JSON.stringify(m) + previousMessage._id + nextMessage._id;
          o[m._id] = babelHelpers.extends({}, m, {
            previousMessage: previousMessage,
            nextMessage: nextMessage,
            hash: (0, _md2.default)(toHash)
          });
          return o;
        }, {})
      };
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (!(0, _shallowequal2.default)(this.props, nextProps)) {
        return true;
      }
      if (!(0, _shallowequal2.default)(this.state, nextState)) {
        return true;
      }
      return false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.messages === nextProps.messages) {
        return;
      }
      var messagesData = this.prepareMessages(nextProps.messages);
      this.setState({
        dataSource: this.state.dataSource.cloneWithRows(messagesData.blob, messagesData.keys)
      });
    }
  }, {
    key: 'renderFooter',
    value: function renderFooter() {
      if (this.props.renderFooter) {
        var footerProps = babelHelpers.extends({}, this.props);
        return this.props.renderFooter(footerProps);
      }
      return null;
    }
  }, {
    key: 'renderLoadEarlier',
    value: function renderLoadEarlier() {
      if (this.props.loadEarlier === true) {
        var loadEarlierProps = babelHelpers.extends({}, this.props);
        if (this.props.renderLoadEarlier) {
          return this.props.renderLoadEarlier(loadEarlierProps);
        }
        return _react2.default.createElement(_LoadEarlier2.default, loadEarlierProps);
      }
      return null;
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(options) {
      this._invertibleScrollViewRef.scrollTo(options);
    }
  }, {
    key: 'renderRow',
    value: function renderRow(message, sectionId, rowId) {
      if (!message._id && message._id !== 0) {
        console.warn('GiftedChat: `_id` is missing for message', JSON.stringify(message));
      }
      if (!message.user) {
        if (!message.system) {
          console.warn("GiftedChat: `user` is missing for message", JSON.stringify(message));
        }
        message.user = {};
      }

      var messageProps = babelHelpers.extends({}, this.props, {
        key: message._id,
        currentMessage: message,
        previousMessage: message.previousMessage,
        nextMessage: message.nextMessage,
        position: message.user._id === this.props.user._id ? 'right' : 'left'
      });

      if (this.props.renderMessage) {
        return this.props.renderMessage(messageProps);
      }
      return _react2.default.createElement(_Message2.default, messageProps);
    }
  }, {
    key: 'renderScrollComponent',
    value: function renderScrollComponent(props) {
      var _this2 = this;

      var invertibleScrollViewProps = this.props.invertibleScrollViewProps;
      return _react2.default.createElement(_reactNativeInvertibleScrollView2.default, babelHelpers.extends({}, props, invertibleScrollViewProps, {
        ref: function ref(component) {
          return _this2._invertibleScrollViewRef = component;
        }
      }));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        {
          ref: 'container',
          style: styles.container
        },
        _react2.default.createElement(_reactNative.ListView, babelHelpers.extends({
          enableEmptySections: true,
          automaticallyAdjustContentInsets: false,
          initialListSize: 20,
          pageSize: 20

        }, this.props.listViewProps, {

          dataSource: this.state.dataSource,

          renderRow: this.renderRow,
          renderHeader: this.renderFooter,
          renderFooter: this.renderLoadEarlier,
          renderScrollComponent: this.renderScrollComponent
        }))
      );
    }
  }]);
  return MessageContainer;
}(_react2.default.Component);

exports.default = MessageContainer;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});

MessageContainer.defaultProps = {
  messages: [],
  user: {},
  renderFooter: null,
  renderMessage: null,
  onLoadEarlier: function onLoadEarlier() {}
};

MessageContainer.propTypes = {
  messages: _propTypes2.default.array,
  user: _propTypes2.default.object,
  renderFooter: _propTypes2.default.func,
  renderMessage: _propTypes2.default.func,
  onLoadEarlier: _propTypes2.default.func,
  listViewProps: _propTypes2.default.object
};