Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeModal = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNativeAnimatable = require('react-native-animatable');

var _animations = require('./animations');

var ANIMATION_DEFINITIONS = babelHelpers.interopRequireWildcard(_animations);

var _indexStyle = require('./index.style.js');

var _indexStyle2 = babelHelpers.interopRequireDefault(_indexStyle);

(0, _reactNativeAnimatable.initializeRegistryWithDefinitions)(ANIMATION_DEFINITIONS);

var ReactNativeModal = exports.ReactNativeModal = function (_Component) {
  babelHelpers.inherits(ReactNativeModal, _Component);

  function ReactNativeModal() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ReactNativeModal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ReactNativeModal.__proto__ || Object.getPrototypeOf(ReactNativeModal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isVisible: false,
      deviceWidth: _reactNative.Dimensions.get('window').width,
      deviceHeight: _reactNative.Dimensions.get('window').height
    }, _this._handleDimensionsUpdate = function (dimensionsUpdate) {
      var deviceWidth = _reactNative.Dimensions.get('window').width;
      var deviceHeight = _reactNative.Dimensions.get('window').height;
      if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {
        _this.setState({ deviceWidth: deviceWidth, deviceHeight: deviceHeight });
      }
    }, _this._open = function () {
      _this.backdropRef.transitionTo({ opacity: _this.props.backdropOpacity }, _this.props.backdropTransitionInTiming);
      _this.contentRef[_this.props.animationIn](_this.props.animationInTiming).then(function () {
        _this.props.onModalShow();
      });
    }, _this._close = function _callee() {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.backdropRef.transitionTo({ opacity: 0 }, _this.props.backdropTransitionOutTiming);
              _this.contentRef[_this.props.animationOut](_this.props.animationOutTiming).then(function () {
                _this.setState({ isVisible: false });
                _this.props.onModalHide();
              });

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, null, _this2);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ReactNativeModal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!this.state.isVisible && nextProps.isVisible) {
        this.setState({ isVisible: true });
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.isVisible) {
        this.setState({ isVisible: true });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.isVisible) {
        this._open();
      }
      _reactNative.DeviceEventEmitter.addListener('didUpdateDimensions', this._handleDimensionsUpdate);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _reactNative.DeviceEventEmitter.removeListener('didUpdateDimensions', this._handleDimensionsUpdate);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.isVisible && !prevState.isVisible) {
        this._open();
      } else if (!this.props.isVisible && prevProps.isVisible) {
        this._close();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          animationIn = _props.animationIn,
          animationInTiming = _props.animationInTiming,
          animationOut = _props.animationOut,
          animationOutTiming = _props.animationOutTiming,
          backdropColor = _props.backdropColor,
          backdropOpacity = _props.backdropOpacity,
          backdropTransitionInTiming = _props.backdropTransitionInTiming,
          backdropTransitionOutTiming = _props.backdropTransitionOutTiming,
          children = _props.children,
          isVisible = _props.isVisible,
          onModalShow = _props.onModalShow,
          onBackdropPress = _props.onBackdropPress,
          onBackButtonPress = _props.onBackButtonPress,
          style = _props.style,
          otherProps = babelHelpers.objectWithoutProperties(_props, ['animationIn', 'animationInTiming', 'animationOut', 'animationOutTiming', 'backdropColor', 'backdropOpacity', 'backdropTransitionInTiming', 'backdropTransitionOutTiming', 'children', 'isVisible', 'onModalShow', 'onBackdropPress', 'onBackButtonPress', 'style']);
      var _state = this.state,
          deviceWidth = _state.deviceWidth,
          deviceHeight = _state.deviceHeight;

      return _react2.default.createElement(
        _reactNative.Modal,
        babelHelpers.extends({
          transparent: true,
          animationType: 'none',
          visible: this.state.isVisible,
          onRequestClose: onBackButtonPress
        }, otherProps),
        _react2.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          { onPress: onBackdropPress },
          _react2.default.createElement(_reactNativeAnimatable.View, {
            ref: function ref(_ref2) {
              return _this3.backdropRef = _ref2;
            },
            style: [_indexStyle2.default.backdrop, {
              backgroundColor: backdropColor,
              width: deviceWidth,
              height: deviceHeight
            }]
          })
        ),
        _react2.default.createElement(
          _reactNativeAnimatable.View,
          babelHelpers.extends({
            ref: function ref(_ref3) {
              return _this3.contentRef = _ref3;
            },
            style: [{ margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] }, _indexStyle2.default.content, style],
            pointerEvents: 'box-none'
          }, otherProps),
          children
        )
      );
    }
  }]);
  return ReactNativeModal;
}(_react.Component);

ReactNativeModal.propTypes = {
  animationIn: _propTypes2.default.string,
  animationInTiming: _propTypes2.default.number,
  animationOut: _propTypes2.default.string,
  animationOutTiming: _propTypes2.default.number,
  backdropColor: _propTypes2.default.string,
  backdropOpacity: _propTypes2.default.number,
  backdropTransitionInTiming: _propTypes2.default.number,
  backdropTransitionOutTiming: _propTypes2.default.number,
  children: _propTypes2.default.node.isRequired,
  isVisible: _propTypes2.default.bool.isRequired,
  onModalShow: _propTypes2.default.func,
  onModalHide: _propTypes2.default.func,
  onBackButtonPress: _propTypes2.default.func,
  onBackdropPress: _propTypes2.default.func,
  style: _propTypes2.default.any
};
ReactNativeModal.defaultProps = {
  animationIn: 'slideInUp',
  animationInTiming: 300,
  animationOut: 'slideOutDown',
  animationOutTiming: 300,
  backdropColor: 'black',
  backdropOpacity: 0.70,
  backdropTransitionInTiming: 300,
  backdropTransitionOutTiming: 300,
  onModalShow: function onModalShow() {
    return null;
  },
  onModalHide: function onModalHide() {
    return null;
  },
  isVisible: false,
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  onBackButtonPress: function onBackButtonPress() {
    return null;
  }
};
exports.default = ReactNativeModal;