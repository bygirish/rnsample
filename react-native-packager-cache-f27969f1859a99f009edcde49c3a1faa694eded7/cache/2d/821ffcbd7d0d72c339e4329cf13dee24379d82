Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require("prop-types");

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _react = require("react");

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require("react-native");

var _GiftedAvatar = require("./GiftedAvatar");

var _GiftedAvatar2 = babelHelpers.interopRequireDefault(_GiftedAvatar);

var _utils = require("./utils");

var Avatar = function (_React$Component) {
  babelHelpers.inherits(Avatar, _React$Component);

  function Avatar() {
    babelHelpers.classCallCheck(this, Avatar);
    return babelHelpers.possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).apply(this, arguments));
  }

  babelHelpers.createClass(Avatar, [{
    key: "renderAvatar",
    value: function renderAvatar() {
      var _this2 = this;

      if (this.props.renderAvatar) {
        var _props = this.props,
            renderAvatar = _props.renderAvatar,
            avatarProps = babelHelpers.objectWithoutProperties(_props, ["renderAvatar"]);

        return this.props.renderAvatar(avatarProps);
      }
      return _react2.default.createElement(_GiftedAvatar2.default, {
        avatarStyle: _reactNative.StyleSheet.flatten([styles[this.props.position].image, this.props.imageStyle[this.props.position]]),
        user: this.props.currentMessage.user,
        onPress: function onPress() {
          return _this2.props.onPressAvatar && _this2.props.onPressAvatar(_this2.props.currentMessage.user);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var renderAvatarOnTop = this.props.renderAvatarOnTop;
      var messageToCompare = renderAvatarOnTop ? this.props.previousMessage : this.props.nextMessage;
      var computedStyle = renderAvatarOnTop ? "onTop" : "onBottom";

      if (this.props.renderAvatar === null) {
        return null;
      }

      if ((0, _utils.isSameUser)(this.props.currentMessage, messageToCompare) && (0, _utils.isSameDay)(this.props.currentMessage, messageToCompare)) {
        return _react2.default.createElement(
          _reactNative.View,
          { style: [styles[this.props.position].container, this.props.containerStyle[this.props.position]] },
          _react2.default.createElement(_GiftedAvatar2.default, {
            avatarStyle: _reactNative.StyleSheet.flatten([styles[this.props.position].image, this.props.imageStyle[this.props.position]])
          })
        );
      }

      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles[this.props.position].container, styles[this.props.position][computedStyle], this.props.containerStyle[this.props.position]] },
        this.renderAvatar()
      );
    }
  }]);
  return Avatar;
}(_react2.default.Component);

exports.default = Avatar;


var styles = {
  left: _reactNative.StyleSheet.create({
    container: {
      marginRight: 8
    },
    onTop: {
      alignSelf: "flex-start"
    },
    onBottom: {},
    image: {
      height: 36,
      width: 36,
      borderRadius: 18
    }
  }),
  right: _reactNative.StyleSheet.create({
    container: {
      marginLeft: 8
    },
    onTop: {
      alignSelf: "flex-start"
    },
    onBottom: {},
    image: {
      height: 36,
      width: 36,
      borderRadius: 18
    }
  })
};

Avatar.defaultProps = {
  renderAvatarOnTop: false,
  position: 'left',
  currentMessage: {
    user: null
  },
  nextMessage: {},
  containerStyle: {},
  imageStyle: {},

  isSameDay: (0, _utils.warnDeprecated)(_utils.isSameDay),
  isSameUser: (0, _utils.warnDeprecated)(_utils.isSameUser)
};

Avatar.propTypes = {
  renderAvatarOnTop: _propTypes2.default.bool,
  position: _propTypes2.default.oneOf(['left', 'right']),
  currentMessage: _propTypes2.default.object,
  nextMessage: _propTypes2.default.object,
  onPressAvatar: _propTypes2.default.func,
  containerStyle: _propTypes2.default.shape({
    left: _reactNative.ViewPropTypes.style,
    right: _reactNative.ViewPropTypes.style
  }),
  imageStyle: _propTypes2.default.shape({
    left: _reactNative.ViewPropTypes.style,
    right: _reactNative.ViewPropTypes.style
  }),

  isSameDay: _propTypes2.default.func,
  isSameUser: _propTypes2.default.func
};