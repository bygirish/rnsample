Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _ewnetworkimage = require('../../components/ewnetworkimage/ewnetworkimage');

var _ewnetworkimage2 = babelHelpers.interopRequireDefault(_ewnetworkimage);

var _ewlistview = require('../../components/ewlistview/ewlistview');

var _ewlistview2 = babelHelpers.interopRequireDefault(_ewlistview);

var _ewlistitem = require('./components/ewmyappliedexpenseclaimcomponents/ewlistitem');

var _ewlistitem2 = babelHelpers.interopRequireDefault(_ewlistitem);

var _utils = require('../../utils');

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _ewh1text = require('../../components/ewh1text/ewh1text');

var _ewh1text2 = babelHelpers.interopRequireDefault(_ewh1text);

var _ewh2text = require('../../components/ewh2text/ewh2text');

var _ewh2text2 = babelHelpers.interopRequireDefault(_ewh2text);

var _ewh3text = require('../../components/ewh3text/ewh3text');

var _ewh3text2 = babelHelpers.interopRequireDefault(_ewh3text);

var _ewscreentitle = require('../../components/ewscreentitle/ewscreentitle');

var _ewscreentitle2 = babelHelpers.interopRequireDefault(_ewscreentitle);

var _expenseutils = require('./expenseutils');

var expenseConstants = babelHelpers.interopRequireWildcard(_expenseutils);

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appStyleGuide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _commonactions = require('../../services/common/commonactions');

var _ewmyappliedexpenseclaimscreenstyles = require('./styles/ewmyappliedexpenseclaimscreenstyles');

var _ewmyappliedexpenseclaimscreenstyles2 = babelHelpers.interopRequireDefault(_ewmyappliedexpenseclaimscreenstyles);

var _commonexpenseclaimactions = require('../../services/expenseclaim/common/commonexpenseclaimactions');

var _commonexpenseclaimerrorhandling = require('../../services/expenseclaim/common/commonexpenseclaimerrorhandling');

var expenseError = babelHelpers.interopRequireWildcard(_commonexpenseclaimerrorhandling);

var _reactNativeScrollableTabViewMaskBar = require('react-native-scrollable-tab-view-mask-bar');

var _reactNativeScrollableTabViewMaskBar2 = babelHelpers.interopRequireDefault(_reactNativeScrollableTabViewMaskBar);

var _ewmyappliedmileageclaimscreen = require('./mileageclaim/ewmyappliedmileageclaimscreen.js');

var _ewmyappliedmileageclaimscreen2 = babelHelpers.interopRequireDefault(_ewmyappliedmileageclaimscreen);

var _ewmyappliedotherclaimscreen = require('./otherclaim/ewmyappliedotherclaimscreen.js');

var _ewmyappliedotherclaimscreen2 = babelHelpers.interopRequireDefault(_ewmyappliedotherclaimscreen);

var FILE_NAME = "ewmyappliedexpenseclaimscreen.js : ";

var SCREEN_NAME = "My Applied Expense Claim Screen";

var SCREEN_CATEGORY = modules.MODULE_TRAVEL_AND_EXPENSE;

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var EwMyAppliedExpenseClaimScreen = function (_Component) {
  babelHelpers.inherits(EwMyAppliedExpenseClaimScreen, _Component);

  function EwMyAppliedExpenseClaimScreen(props) {
    babelHelpers.classCallCheck(this, EwMyAppliedExpenseClaimScreen);


    console.log(FILE_NAME + " In constructor");

    var _this = babelHelpers.possibleConstructorReturn(this, (EwMyAppliedExpenseClaimScreen.__proto__ || Object.getPrototypeOf(EwMyAppliedExpenseClaimScreen)).call(this, props));

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      if (_this.state.currentError != '') _this.clearCurrentMessage();

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentMessage = function () {

      _this.setState({
        currentError: ''
      });
    };

    tracker.trackScreenView(SCREEN_NAME);

    _this.initialState = {
      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      componentInitializeTime: new Date().getTime()

    };

    _this.state = _this.initialState;
    return _this;
  }

  babelHelpers.createClass(EwMyAppliedExpenseClaimScreen, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log(FILE_NAME + " In componentWillMount method");

      this.setState({
        isDataPreLoaded: true,
        isLoading: false
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + " In componentWillReceiveProps method");

      console.log("New Props are - ", nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + " In shouldComponentUpdate method");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {

      console.log(FILE_NAME + " In componentWillUpdate method");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + " In render() Method");

      if (this.props.isLoggedIn) {

        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");

          return _react2.default.createElement(_ewloadingindicator2.default, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              {
                this.showAlertMessage();
              }

              _reactNativeRouterFlux.Actions.pop({ type: _reactNativeRouterFlux.ActionConst.REFRESH });

              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError === '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);

                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);
            return this.handleError();
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + " In componentDidMount method");
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + " In componentDidUpdate method");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + " In componentWillUnmount method");

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      var params = {
        "0": 'CLEAR_STATE_DATA_ALL'
      };

      this.props.clearCommonExpenseClaimStateData(params);
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {
      var _this2 = this;

      console.log(FILE_NAME + " In renderScreen method");

      var appliedExpenseClaimData = this.state.appliedExpenseClaimData;


      console.log(appliedExpenseClaimData);

      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Header,
          { hasTabs: true },
          _react2.default.createElement(
            _nativeBase.Left,
            { style: { flex: 0.5 } },
            _react2.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                } },
              _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            { style: { flex: 3 } },
            _react2.default.createElement(_ewscreentitle2.default, {
              text: 'My Expense Claim Request'
            })
          )
        ),
        _react2.default.createElement(
          _nativeBase.Tabs,
          { renderTabBar: function renderTabBar() {
              return _this2.getScrollableTab();
            } },
          _react2.default.createElement(
            _nativeBase.Tab,
            { heading: 'Mileage', textStyle: { fontSize: 16 } },
            _react2.default.createElement(_ewmyappliedmileageclaimscreen2.default, { isMyRequest: true })
          ),
          _react2.default.createElement(
            _nativeBase.Tab,
            { heading: 'Other', textStyle: { fontSize: 16 } },
            _react2.default.createElement(_ewmyappliedotherclaimscreen2.default, { isMyRequest: true })
          )
        )
      );
    }
  }, {
    key: 'handleError',
    value: function handleError() {

      console.log(FILE_NAME + " In handleError method");

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      console.log("this.state.currentError", this.state.currentError);

      if (this.state.currentError == '') {
        return null;
      }

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:

          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }

          break;

        case expenseError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {
        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (this.state.currentError) {

          case expenseError.SERVER_EXCEPTION:

            this.showAlertMessage(expenseError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:

            this.showAlertMessage();
            return this.renderScreen();
        }
      }
    }
  }, {
    key: 'getScrollableTab',
    value: function getScrollableTab() {

      return _react2.default.createElement(_reactNativeScrollableTabViewMaskBar2.default, {
        activeTextColor: appStyleGuide.APP_WHITE,
        underlineStyle: { backgroundColor: appStyleGuide.APP_WHITE },
        inactiveTextColor: appStyleGuide.APP_WHITE,
        backgroundColor: appStyleGuide.APP_BLUE,
        showMask: false,
        maskMode: 'light' });
    }
  }]);
  return EwMyAppliedExpenseClaimScreen;
}(_react.Component);

function bindAction(dispatch) {

  console.log(FILE_NAME + " In bindAction method");

  return {

    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    },
    clearCommonExpenseClaimStateData: function clearCommonExpenseClaimStateData(params) {
      return dispatch((0, _commonexpenseclaimactions.clearCommonExpenseClaimStateData)(params));
    }
  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {

    sessionToken: state.auth.sessionToken,
    isLoggedIn: state.auth.isLoggedIn,
    errorWebService: state.auth.errorWebService,

    appliedExpenseClaimData: state.commonExpenseClaim.appliedExpenseClaimData,
    appliedExpenseClaimError: state.commonExpenseClaim.appliedExpenseClaimError,

    errorCounter: state.commonExpenseClaim.errorCounter,

    currentImageTimestamp: state.common.currentImageTimestamp

  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindAction)(EwMyAppliedExpenseClaimScreen);