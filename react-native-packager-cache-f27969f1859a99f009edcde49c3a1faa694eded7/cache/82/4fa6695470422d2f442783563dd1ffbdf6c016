Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Composer = require('./Composer');

var _Composer2 = babelHelpers.interopRequireDefault(_Composer);

var _Send = require('./Send');

var _Send2 = babelHelpers.interopRequireDefault(_Send);

var _Actions = require('./Actions');

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var InputToolbar = function (_React$Component) {
  babelHelpers.inherits(InputToolbar, _React$Component);

  function InputToolbar(props) {
    babelHelpers.classCallCheck(this, InputToolbar);

    var _this = babelHelpers.possibleConstructorReturn(this, (InputToolbar.__proto__ || Object.getPrototypeOf(InputToolbar)).call(this, props));

    _this._keyboardWillShow = function () {
      _this.setState({
        position: 'relative'
      });
    };

    _this._keyboardWillHide = function () {
      _this.setState({
        position: 'absolute'
      });
    };

    _this.state = {
      position: 'absolute'
    };
    return _this;
  }

  babelHelpers.createClass(InputToolbar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.keyboardWillShowListener = _reactNative.Keyboard.addListener('keyboardWillShow', this._keyboardWillShow);
      this.keyboardWillHideListener = _reactNative.Keyboard.addListener('keyboardWillHide', this._keyboardWillHide);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.keyboardWillShowListener.remove();
      this.keyboardWillHideListener.remove();
    }
  }, {
    key: 'renderActions',
    value: function renderActions() {
      if (this.props.renderActions) {
        return this.props.renderActions(this.props);
      } else if (this.props.onPressActionButton) {
        return _react2.default.createElement(_Actions2.default, this.props);
      }
      return null;
    }
  }, {
    key: 'renderSend',
    value: function renderSend() {
      if (this.props.renderSend) {
        return this.props.renderSend(this.props);
      }
      return _react2.default.createElement(_Send2.default, this.props);
    }
  }, {
    key: 'renderComposer',
    value: function renderComposer() {
      if (this.props.renderComposer) {
        return this.props.renderComposer(this.props);
      }

      return _react2.default.createElement(_Composer2.default, this.props);
    }
  }, {
    key: 'renderAccessory',
    value: function renderAccessory() {
      if (this.props.renderAccessory) {
        return _react2.default.createElement(
          _reactNative.View,
          { style: [styles.accessory, this.props.accessoryStyle] },
          this.props.renderAccessory(this.props)
        );
      }
      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.container, this.props.containerStyle, { position: this.state.position }] },
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.primary, this.props.primaryStyle] },
          this.renderActions(),
          this.renderComposer(),
          this.renderSend()
        ),
        this.renderAccessory()
      );
    }
  }]);
  return InputToolbar;
}(_react2.default.Component);

exports.default = InputToolbar;


var styles = _reactNative.StyleSheet.create({
  container: {
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    borderTopColor: '#b2b2b2',
    backgroundColor: '#FFFFFF',
    bottom: 0,
    width: _reactNative.Dimensions.get('window').width
  },
  primary: {
    flexDirection: 'row',
    alignItems: 'flex-end'
  },
  accessory: {
    height: 44
  }
});

InputToolbar.defaultProps = {
  renderAccessory: null,
  renderActions: null,
  renderSend: null,
  renderComposer: null,
  containerStyle: {},
  primaryStyle: {},
  accessoryStyle: {}
};

InputToolbar.propTypes = {
  renderAccessory: _propTypes2.default.func,
  renderActions: _propTypes2.default.func,
  renderSend: _propTypes2.default.func,
  renderComposer: _propTypes2.default.func,
  onPressActionButton: _propTypes2.default.func,
  containerStyle: _reactNative.ViewPropTypes.style,
  primaryStyle: _reactNative.ViewPropTypes.style,
  accessoryStyle: _reactNative.ViewPropTypes.style
};