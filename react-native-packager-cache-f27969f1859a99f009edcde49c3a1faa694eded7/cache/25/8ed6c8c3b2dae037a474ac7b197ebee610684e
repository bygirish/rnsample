Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EwEntitlementSummaryScreen = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _reactNativeNavigationReduxHelpers = require('react-native-navigation-redux-helpers');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _ewbar = require('../../components/ewbar/ewbar');

var _ewbar2 = babelHelpers.interopRequireDefault(_ewbar);

var _ewbutton = require('../../components/ewbutton/ewbutton');

var _ewbutton2 = babelHelpers.interopRequireDefault(_ewbutton);

var _ewh3text = require('../../components/ewh3text/ewh3text');

var _ewh3text2 = babelHelpers.interopRequireDefault(_ewh3text);

var _ewh3lighttext = require('../../components/ewh3lighttext/ewh3lighttext');

var _ewh3lighttext2 = babelHelpers.interopRequireDefault(_ewh3lighttext);

var _ewh4lighttext = require('../../components/ewh4lighttext/ewh4lighttext');

var _ewh4lighttext2 = babelHelpers.interopRequireDefault(_ewh4lighttext);

var _ewscreentitle = require('../../components/ewscreentitle/ewscreentitle');

var _ewscreentitle2 = babelHelpers.interopRequireDefault(_ewscreentitle);

var _ewreportissue = require('../../components/ewreportissue/ewreportissue');

var _ewreportissue2 = babelHelpers.interopRequireDefault(_ewreportissue);

var _ewaccordion = require('../../components/ewaccordion/ewaccordion');

var _ewaccordion2 = babelHelpers.interopRequireDefault(_ewaccordion);

var _compensationactions = require('../../services/compensation/compensationactions');

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _commonactions = require('../../services/common/commonactions');

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _ewmycompensationstyles = require('./styles/ewmycompensationstyles');

var _ewmycompensationstyles2 = babelHelpers.interopRequireDefault(_ewmycompensationstyles);

var _compensationerrorhandling = require('../../services/compensation/compensationerrorhandling');

var compensationError = babelHelpers.interopRequireWildcard(_compensationerrorhandling);

var _utils = require('../../utils');

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _compensationutils = require('./compensationutils');

var entitlementConstants = babelHelpers.interopRequireWildcard(_compensationutils);

var _animationutils = require('../../utils/animationutils');

var animationUtils = babelHelpers.interopRequireWildcard(_animationutils);

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var _screennameidentifiers = require('../../utils/screennameidentifiers');

var FILE_NAME = "ewentitlementsummaryscreen.js : ";

var SCREEN_NAME = "Entitlement Summary Screen";

var SCREEN_CATEGORY = modules.MODULE_COMPENSATION_AND_BENEFITS;

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var EwEntitlementSummaryScreen = exports.EwEntitlementSummaryScreen = function (_Component) {
  babelHelpers.inherits(EwEntitlementSummaryScreen, _Component);

  function EwEntitlementSummaryScreen(props, context) {
    babelHelpers.classCallCheck(this, EwEntitlementSummaryScreen);


    tracker.trackScreenView(SCREEN_NAME);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwEntitlementSummaryScreen.__proto__ || Object.getPrototypeOf(EwEntitlementSummaryScreen)).call(this, props, context));

    _this.renderEntitlementSummaryScreen = function (entitlementSummaryDataState, entitlementSummaryErrorState, entitlementSummaryRenderView, entitlementSummaryLoadAgainAction) {

      console.log(FILE_NAME + "In renderEntitlementSummaryScreen");

      if (entitlementSummaryDataState != null && entitlementSummaryErrorState == null) {

        console.log("1st Case");

        return entitlementSummaryRenderView;
      } else if (entitlementSummaryDataState == null && entitlementSummaryErrorState == null) {

        console.log("2nd Case");

        return _react2.default.createElement(
          _reactNative.View,
          { style: _ewmycompensationstyles2.default.spinnerContainer },
          _react2.default.createElement(_nativeBase.Spinner, { size: 'small' }),
          _react2.default.createElement(
            _nativeBase.Text,
            { style: _ewmycompensationstyles2.default.spinnerElement },
            'Loading...'
          )
        );
      } else if (entitlementSummaryDataState == null && entitlementSummaryErrorState != null) {

        console.log("3rd Case");

        return _react2.default.createElement(
          _reactNative.View,
          { style: _ewmycompensationstyles2.default.loadAgainButtonContainer },
          _react2.default.createElement(_ewbutton2.default, {
            label: 'Load Again',
            onButonClicked: function onButonClicked() {
              return entitlementSummaryLoadAgainAction;
            }
          })
        );
      } else {

        console.log("4th Case");
        console.log("entitlementSummaryDataState, ", entitlementSummaryDataState);
        console.log("entitlementSummaryErrorState, ", entitlementSummaryErrorState);
      }
    };

    _this.renderEntitlementSummaryInformation = function () {

      console.log(FILE_NAME + "In renderEntitlementSummaryInformation");

      var entitlementSummaryData = _this.state.entitlementSummaryData;


      if (entitlementSummaryData != null) {

        console.log(" entitlementSummaryData", entitlementSummaryData);

        return _react2.default.createElement(
          _reactNative.View,
          { style: { margin: appstyleguide.DEFAULT_MARGIN } },
          _this.renderTotalEntitlementSummary(),
          _react2.default.createElement(_ewbar2.default, {
            customStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN, marginBottom: appstyleguide.DEFAULT_BOTTOM_MARGIN }
          })
        );
      }
    };

    _this.setActiveAccordian = function (payhead) {

      newPayhead = payhead;

      if (_this.state.activeAccordian == payhead) newPayhead = null;

      _this.setState({
        activeAccordian: newPayhead
      });
    };

    _this.isActiveAccordian = function (payhead) {

      if (payhead == _this.state.activeAccordian) return false;
      return true;
    };

    _this.getPayheadTitle = function (payhead, currency, totalPayheadValue) {
      var paySlipInformationData = _this.state.paySlipInformationData;


      payHeadTitle = "";
      payHeadValue = "";

      switch (payhead) {
        case compensationConstants.EARNINGS_LABEL:

          payHeadTitle = compensationConstants.EARNINGS_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);
          break;

        case compensationConstants.DEDUCTIONS_LABEL:

          payHeadTitle = compensationConstants.DEDUCTIONS_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;
        case compensationConstants.BENEFIT_LABEL:

          payHeadTitle = compensationConstants.BENEFIT_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;

        case compensationConstants.REIMBURSEMENT_LABEL:

          payHeadTitle = compensationConstants.REIMBURSEMENT_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;
        default:

      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: { flexDirection: 'row' } },
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 1, marginLeft: 5 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: payHeadTitle
          })
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 1, alignItems: 'flex-end', marginRight: 50 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: payHeadValue
          })
        )
      );
    };

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      if (_this.state.currentError != '') _this.clearCurrentMessage();

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentMessage = function () {

      _this.setState({
        currentError: ''
      });
    };

    _this.initialState = {
      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      entitlementSummaryData: null,

      activeAccordian: null,

      componentInitializeTime: new Date().getTime()

    };
    _this.state = _this.initialState;
    return _this;
  }

  babelHelpers.createClass(EwEntitlementSummaryScreen, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log(FILE_NAME + "In componentWillMount");

      this.setState({
        isDataPreLoaded: true,
        isLoading: false
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (nextProps.entitlementSummaryData != null && nextProps.entitlementSummaryError == null) {

        this.setState({
          isLoading: false,
          entitlementSummaryData: nextProps.entitlementSummaryData

        });
      }

      if (nextProps.entitlementSummaryData == null && nextProps.entitlementSummaryError != null) {

        this.setState({
          isLoading: false,
          currentError: nextProps.entitlementSummaryError
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {

      console.log(FILE_NAME + "In componentWillUpdate");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render() Method");

      if (this.props.isLoggedIn) {

        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");

          return _react2.default.createElement(_ewloadingindicator2.default, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              {
                this.showAlertMessage();
              }
              _reactNativeRouterFlux.Actions.pop({ type: _reactNativeRouterFlux.ActionConst.REFRESH });
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);

                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);

            return this.handleError();
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");


      this.createEntitlementSummaryRequest();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount");

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      var params = {
        "0": 'CLEAR_STATE_DATA_ALL'
      };

      this.props.clearCompensationStateData(params);
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {
      var _this2 = this;

      console.log(FILE_NAME + "In renderScreen");

      var entitlementSummaryData = this.state.entitlementSummaryData;
      var entitlementSummaryError = this.props.entitlementSummaryError;


      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Header,
          null,
          _react2.default.createElement(
            _nativeBase.Left,
            { style: { flex: 0.5 } },
            _react2.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                } },
              _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            { style: { flex: 2 } },
            _react2.default.createElement(_ewscreentitle2.default, {
              text: 'Entitlement Summary'
            })
          ),
          _react2.default.createElement(
            _nativeBase.Right,
            null,
            _react2.default.createElement(_ewreportissue2.default, {
              screenId: _screennameidentifiers.ENTITLEMENT_SUMMARY_ID
            })
          )
        ),
        _react2.default.createElement(
          _nativeBase.Content,
          null,
          this.renderEntitlementSummaryScreen(entitlementSummaryData, entitlementSummaryError, this.renderEntitlementSummaryInformation(), function () {
            return _this2.createEntitlementSummaryRequest();
          })
        )
      );
    }
  }, {
    key: 'createEntitlementSummaryRequest',
    value: function createEntitlementSummaryRequest() {

      var params = {
        "employee_id": 78301,
        "employee_code": "0001"

      };

      this.props.getEntitlementSummary(params);
    }
  }, {
    key: 'renderTotalEntitlementSummary',
    value: function renderTotalEntitlementSummary() {

      console.log("Inside renderTotalEntitlementSummary");

      var _state$entitlementSum = this.state.entitlementSummaryData,
          totalEntitlementValue = _state$entitlementSum.totalEntitlementValue,
          totalClaimedValue = _state$entitlementSum.totalClaimedValue,
          totalAwaitingApprovalValue = _state$entitlementSum.totalAwaitingApprovalValue,
          totalApprovedValue = _state$entitlementSum.totalApprovedValue,
          totalPaidValue = _state$entitlementSum.totalPaidValue,
          totalAwaitingPaymentValue = _state$entitlementSum.totalAwaitingPaymentValue,
          remainingEntitlementValue = _state$entitlementSum.remainingEntitlementValue;


      return _react2.default.createElement(
        _reactNative.View,
        null,
        this.renderListItem(entitlementConstants.TOTAL_ENTITLEMENT_LABEL, totalEntitlementValue),
        this.renderListItem(entitlementConstants.TOTAL_CLAIMED_LABEL, totalClaimedValue),
        this.renderListItem(entitlementConstants.AWAITING_APPROVAL_LABEL, totalAwaitingApprovalValue),
        this.renderListItem(entitlementConstants.TOTAL_APPROVED_LABEL, totalApprovedValue),
        this.renderListItem(entitlementConstants.TOTAL_PAID_LABEL, totalPaidValue),
        this.renderListItem(entitlementConstants.AWAITING_PAYMENT_LABEL, totalAwaitingPaymentValue),
        this.renderListItem(entitlementConstants.REMAINING_ENTITLEMENT_LABEL, remainingEntitlementValue)
      );
    }
  }, {
    key: 'renderListItem',
    value: function renderListItem(label, value) {

      return _react2.default.createElement(
        _reactNative.View,
        { style: { flexDirection: "row", marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.5, marginLeft: 20 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: label
          })
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.5 } },
          _react2.default.createElement(_ewh3lighttext2.default, {
            text: value
          })
        )
      );
    }
  }, {
    key: 'renderPayHeadDetails',
    value: function renderPayHeadDetails(payhead, payHeadInformation, currency, totalPayheadValue) {
      var _this3 = this;

      if (payHeadInformation != null && payHeadInformation.length != 0) {

        return _react2.default.createElement(_ewaccordion2.default, {
          renderAccordionLabel: function renderAccordionLabel() {
            return _this3.getPayheadTitle(payhead, currency, totalPayheadValue);
          },
          isActive: this.isActiveAccordian(payhead),
          onAccordionPress: function onAccordionPress() {
            return _this3.setActiveAccordian(payhead);
          }
        });
      }
    }
  }, {
    key: 'isStringType',
    value: function isStringType(value) {

      if (value == "") return true;

      return false;
    }
  }, {
    key: 'handleError',
    value: function handleError(errorMessage) {

      console.log(FILE_NAME + "In handleError");
      console.log("this.state.currentError", this.state.currentError);

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:
          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }


          break;

        case compensationError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {
        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (errorMessage) {

          case compensationError.SERVER_EXCEPTION:
            this.showAlertMessage(compensationError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:
            this.showAlertMessage();
            return this.renderScreen();}
      }
    }
  }]);
  return EwEntitlementSummaryScreen;
}(_react.Component);

function bindAction(dispatch) {

  console.log(FILE_NAME + "In bindAction");

  return {

    getEntitlementSummary: function getEntitlementSummary(params) {
      return dispatch((0, _compensationactions.getEntitlementSummary)(params));
    },
    clearCompensationError: function clearCompensationError(params) {
      return dispatch((0, _compensationactions.clearCompensationError)(params));
    },

    clearCompensationStateData: function clearCompensationStateData(params) {
      return dispatch((0, _compensationactions.clearCompensationStateData)(params));
    },
    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    }

  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {
    isLoggedIn: state.auth.isLoggedIn,
    sessionToken: state.auth.sessionToken,

    entitlementSummaryData: state.compensation.entitlementSummaryData,
    entitlementSummaryError: state.compensation.entitlementSummaryError,

    errorCounter: state.compensation.errorCounter
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindAction)(EwEntitlementSummaryScreen);