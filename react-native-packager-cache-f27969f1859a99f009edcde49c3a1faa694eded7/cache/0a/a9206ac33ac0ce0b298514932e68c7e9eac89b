Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EwMyCompensation = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _reactNativeNavigationReduxHelpers = require('react-native-navigation-redux-helpers');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _ewbar = require('../../components/ewbar/ewbar');

var _ewbar2 = babelHelpers.interopRequireDefault(_ewbar);

var _ewbutton = require('../../components/ewbutton/ewbutton');

var _ewbutton2 = babelHelpers.interopRequireDefault(_ewbutton);

var _ewh3text = require('../../components/ewh3text/ewh3text');

var _ewh3text2 = babelHelpers.interopRequireDefault(_ewh3text);

var _ewh4lighttext = require('../../components/ewh4lighttext/ewh4lighttext');

var _ewh4lighttext2 = babelHelpers.interopRequireDefault(_ewh4lighttext);

var _ewscreentitle = require('../../components/ewscreentitle/ewscreentitle');

var _ewscreentitle2 = babelHelpers.interopRequireDefault(_ewscreentitle);

var _ewreportissue = require('../../components/ewreportissue/ewreportissue');

var _ewreportissue2 = babelHelpers.interopRequireDefault(_ewreportissue);

var _ewaccordion = require('../../components/ewaccordion/ewaccordion');

var _ewaccordion2 = babelHelpers.interopRequireDefault(_ewaccordion);

var _compensationactions = require('../../services/compensation/compensationactions');

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _commonactions = require('../../services/common/commonactions');

var _appstyleguide = require('../../../appstyleguide/appstyleguide');

var appstyleguide = babelHelpers.interopRequireWildcard(_appstyleguide);

var _ewmycompensationstyles = require('./styles/ewmycompensationstyles');

var _ewmycompensationstyles2 = babelHelpers.interopRequireDefault(_ewmycompensationstyles);

var _compensationerrorhandling = require('../../services/compensation/compensationerrorhandling');

var compensationError = babelHelpers.interopRequireWildcard(_compensationerrorhandling);

var _utils = require('../../utils');

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _compensationutils = require('./compensationutils');

var compensationConstants = babelHelpers.interopRequireWildcard(_compensationutils);

var _animationutils = require('../../utils/animationutils');

var animationUtils = babelHelpers.interopRequireWildcard(_animationutils);

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var _screennameidentifiers = require('../../utils/screennameidentifiers');

var FILE_NAME = "ewmycompensationscreen.js : ";

var SCREEN_NAME = "My Compensation Screen";

var SCREEN_CATEGORY = modules.MODULE_COMPENSATION_AND_BENEFITS;

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var EwMyCompensation = exports.EwMyCompensation = function (_Component) {
  babelHelpers.inherits(EwMyCompensation, _Component);

  function EwMyCompensation(props, context) {
    babelHelpers.classCallCheck(this, EwMyCompensation);


    tracker.trackScreenView(SCREEN_NAME);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwMyCompensation.__proto__ || Object.getPrototypeOf(EwMyCompensation)).call(this, props, context));

    _this.renderMyCompensationScreen = function (compensationDataState, compensationErrorState, compensationRenderView, compensationLoadAgainAction) {

      console.log(FILE_NAME + "In renderMyCompensationScreen");

      if (compensationDataState != null && compensationErrorState == null) {

        console.log("1st Case");

        return compensationRenderView;
      } else if (compensationDataState == null && compensationErrorState == null) {

        console.log("2nd Case");

        return _react2.default.createElement(
          _reactNative.View,
          { style: _ewmycompensationstyles2.default.spinnerContainer },
          _react2.default.createElement(_nativeBase.Spinner, { size: 'small' }),
          _react2.default.createElement(
            _nativeBase.Text,
            { style: _ewmycompensationstyles2.default.spinnerElement },
            'Loading...'
          )
        );
      } else if (compensationDataState == null && compensationErrorState != null) {

        console.log("3rd Case");

        return _react2.default.createElement(
          _reactNative.View,
          { style: _ewmycompensationstyles2.default.loadAgainButtonContainer },
          _react2.default.createElement(_ewbutton2.default, {
            label: 'Load Again',
            onButonClicked: function onButonClicked() {
              return compensationLoadAgainAction;
            }
          })
        );
      } else {

        console.log("4th Case");
        console.log("compensationDataState, ", compensationDataState);
        console.log("compensationErrorState, ", compensationErrorState);
      }
    };

    _this.renderMyCompensationInformation = function () {

      console.log(FILE_NAME + "In renderMyCompensationInformation");

      var myCompensationData = _this.state.myCompensationData;


      if (myCompensationData != null) {

        console.log("myCompensationData", myCompensationData);

        currency = myCompensationData.currency;

        payHeads = _this.calculatePayHeads(myCompensationData.compensationPayheads);

        console.log("payHeads", payHeads);

        return _react2.default.createElement(
          _reactNative.View,
          { style: { margin: appstyleguide.DEFAULT_MARGIN } },
          _react2.default.createElement(_ewbar2.default, null),
          _this.renderListItem(compensationConstants.CTC_TOTAL_LABEL, myCompensationData.annualCTC),
          _this.renderListItem(compensationConstants.SALARY_LABEL, payHeads.salary),
          _react2.default.createElement(_ewbar2.default, {
            customStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN }
          }),
          _react2.default.createElement(
            _reactNative.View,
            { style: { justifyContent: 'center', alignItems: 'center', marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
            _react2.default.createElement(_ewh3text2.default, {
              text: 'Compensation Details',
              customStyle: { fontWeight: "bold" }
            })
          ),
          _react2.default.createElement(_ewbar2.default, {
            customStyle: { marginTop: appstyleguide.DEFAULT_TOP_MARGIN, marginBottom: appstyleguide.DEFAULT_BOTTOM_MARGIN }
          }),
          _this.renderPayHeadDetails(compensationConstants.EARNINGS_LABEL, payHeads.earnings, currency, payHeads.totalEarnings),
          _this.renderPayHeadDetails(compensationConstants.DEDUCTIONS_LABEL, payHeads.deductions, currency, payHeads.totalDeductions),
          _this.renderPayHeadDetails(compensationConstants.BENEFIT_LABEL, payHeads.benefit, currency, payHeads.totalBenefits),
          _this.renderPayHeadDetails(compensationConstants.REIMBURSEMENT_LABEL, payHeads.reimbursement, currency, payHeads.totalReimbursements)
        );
      }
    };

    _this.setActiveAccordian = function (payhead) {

      newPayhead = payhead;

      if (_this.state.activeAccordian == payhead) newPayhead = null;

      _this.setState({
        activeAccordian: newPayhead
      });
    };

    _this.isActiveAccordian = function (payhead) {

      if (payhead == _this.state.activeAccordian) return false;
      return true;
    };

    _this.getPayheadTitle = function (payhead, currency, totalPayheadValue) {
      var paySlipInformationData = _this.state.paySlipInformationData;


      payHeadTitle = "";
      payHeadValue = "";

      switch (payhead) {
        case compensationConstants.EARNINGS_LABEL:

          payHeadTitle = compensationConstants.EARNINGS_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);
          break;

        case compensationConstants.DEDUCTIONS_LABEL:

          payHeadTitle = compensationConstants.DEDUCTIONS_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;
        case compensationConstants.BENEFIT_LABEL:

          payHeadTitle = compensationConstants.BENEFIT_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;

        case compensationConstants.REIMBURSEMENT_LABEL:

          payHeadTitle = compensationConstants.REIMBURSEMENT_LABEL;
          payHeadValue = _this.getCurrencySymbol(currency) + ' ' + _this.formatCurrencyIndianFormat(totalPayheadValue);

          break;
        default:

      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: { flexDirection: 'row' } },
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.7, marginLeft: 5 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: payHeadTitle
          })
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.3, alignItems: 'flex-end', marginRight: 50 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: payHeadValue
          })
        )
      );
    };

    _this.calculatePayHeads = function (compensationPayHeadData) {

      console.log("compensationPayHeadData", compensationPayHeadData);

      earnings = [];
      totalEarnings = 0;
      deductions = [];
      totalDeductions = 0;
      benefit = [];
      totalBenefits = 0;
      reimbursement = [];
      totalReimbursements = 0;
      salary = 0;

      for (var _iterator = compensationPayHeadData, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var payhead = _ref;


        if (payhead.emp_comp_type == compensationConstants.COMPENSATION_TYPE_PROVISION) {

          if (payhead.emp_comp_sub_type == compensationConstants.COMPENSATION_SUBTYPE_EXGRATIA) payhead["emp_comp_frequency"] = compensationConstants.SERVER_FREQUENCY_YEARLY;
        }

        payheadAnnualInfo = _this.getPayheadAnnualInfo(payhead.emp_comp_amount, payhead.emp_comp_frequency);
        annualPayheadValue = payheadAnnualInfo.annualValue;
        frequency = payheadAnnualInfo.frequency;

        payhead["frequency"] = frequency;
        payhead["annualPayheadValue"] = annualPayheadValue;

        switch (payhead.emp_comp_type) {

          case compensationConstants.COMPENSATION_TYPE_EARNINGS:
          case compensationConstants.COMPENSATION_TYPE_PROVISION:
          case compensationConstants.COMPENSATION_TYPE_STATUTORY_HEAD_CONTRIBUTIONS:

            earnings.push(payhead);

            if (payhead.emp_comp_type != compensationConstants.COMPENSATION_TYPE_STATUTORY_HEAD_CONTRIBUTIONS) {

              salary += _this.calculateSalary(payhead);
              totalEarnings += annualPayheadValue;
            }

            break;

          case compensationConstants.COMPENSATION_TYPE_DEDUCTIONS:
          case compensationConstants.COMPENSATION_TYPE_STATUTORY_HEAD_DEDUCTION:

            totalDeductions += annualPayheadValue;
            deductions.push(payhead);
            salary -= _this.calculateSalary(payhead);
            break;

          case compensationConstants.COMPENSATION_TYPE_BENEFIT:

            totalBenefits += annualPayheadValue;
            benefit.push(payhead);
            salary += _this.calculateSalary(payhead);

            break;

          case compensationConstants.COMPENSATION_TYPE_REIMBURSEMENT:

            totalReimbursements += annualPayheadValue;
            reimbursement.push(payhead);
            salary += _this.calculateSalary(payhead);
            break;

          default:

        }
      }

      console.log("payheads", compensationPayHeadData);

      payHeadData = {
        earnings: earnings,
        deductions: deductions,
        benefit: benefit,
        reimbursement: reimbursement,
        totalEarnings: totalEarnings,
        totalDeductions: totalDeductions,
        totalBenefits: totalBenefits,
        totalReimbursements: totalReimbursements,
        salary: salary
      };

      console.log("payheads", earnings, deductions, benefit, reimbursement);

      return payHeadData;
    };

    _this.showAlertMessage = function (messageText, messageHeading, messageType) {

      console.log(FILE_NAME + "In showAlertMessage method");

      if (messageText === undefined) messageText = _this.state.currentError;

      if (messageHeading === undefined) messageHeading = 'Oops';

      if (messageType === undefined) messageType = 'error';

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      if (_this.state.currentError != '') _this.clearCurrentMessage();

      _this.props.showDropDownAlertMessage(message);
    };

    _this.clearCurrentMessage = function () {

      _this.setState({
        currentError: ''
      });
    };

    _this.initialState = {
      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      myCompensationData: null,

      activeAccordian: null,

      componentInitializeTime: new Date().getTime()

    };
    _this.state = _this.initialState;
    return _this;
  }

  babelHelpers.createClass(EwMyCompensation, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log(FILE_NAME + "In componentWillMount");

      this.setState({
        isDataPreLoaded: true,
        isLoading: false
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (nextProps.myCompensationData != null && nextProps.myCompensationError == null) {

        this.setState({
          isLoading: false,
          isDataPreLoaded: true,
          myCompensationData: nextProps.myCompensationData

        });
      }

      if (nextProps.myCompensationData == null && nextProps.myCompensationError != null) {

        this.setState({
          isLoading: false,
          isDataPreLoaded: false,
          currentError: nextProps.myCompensationError
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {

      console.log(FILE_NAME + "In componentWillUpdate");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render() Method");

      if (this.props.isLoggedIn) {

        console.log("Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active");

          return _react2.default.createElement(_ewloadingindicator2.default, null);
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");

              {
                this.showAlertMessage();
              }
              _reactNativeRouterFlux.Actions.pop({ type: _reactNativeRouterFlux.ActionConst.REFRESH });
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);

                return this.handleError();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);

            return this.handleError();
          }
        }
      } else {

        console.log("Not Logged in");

        _reactNativeRouterFlux.Actions.ewlogin();
        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");


      this.props.getMyCompensationInformation();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      console.log(FILE_NAME + "In componentWillUnmount");

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);

      var params = {
        "0": 'CLEAR_STATE_DATA_ALL'
      };

      this.props.clearCompensationStateData(params);
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {

      console.log(FILE_NAME + "In renderScreen");

      var myCompensationData = this.state.myCompensationData;
      var _props = this.props,
          myCompensationError = _props.myCompensationError,
          getMyCompensationInformation = _props.getMyCompensationInformation;


      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Header,
          null,
          _react2.default.createElement(
            _nativeBase.Left,
            { style: { flex: 0.5 } },
            _react2.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                } },
              _react2.default.createElement(_nativeBase.Icon, { name: 'arrow-back' })
            )
          ),
          _react2.default.createElement(
            _nativeBase.Body,
            { style: { flex: 3 } },
            _react2.default.createElement(_ewscreentitle2.default, {
              text: 'My Compensation'
            })
          ),
          _react2.default.createElement(
            _nativeBase.Right,
            null,
            _react2.default.createElement(_ewreportissue2.default, {
              screenId: _screennameidentifiers.MY_COMPENSATION_ID
            })
          )
        ),
        _react2.default.createElement(
          _nativeBase.Content,
          null,
          this.renderMyCompensationScreen(myCompensationData, myCompensationError, this.renderMyCompensationInformation(), getMyCompensationInformation)
        )
      );
    }
  }, {
    key: 'renderListItem',
    value: function renderListItem(key, value, currency) {

      currency = this.state.myCompensationData.currency;

      return _react2.default.createElement(
        _reactNative.View,
        { style: { flexDirection: 'row', marginTop: appstyleguide.DEFAULT_TOP_MARGIN } },
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.5, marginLeft: 20 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: key
          })
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: { flex: 0.5 } },
          _react2.default.createElement(_ewh3text2.default, {
            text: this.getCurrencySymbol(currency) + " " + this.formatCurrencyIndianFormat(value)
          })
        )
      );
    }
  }, {
    key: 'formatCurrencyIndianFormat',
    value: function formatCurrencyIndianFormat(num) {
      var n1, n2;
      num = num + '' || '';

      n1 = num.split('.');
      n2 = n1[1] || null;
      n1 = n1[0].replace(/(\d)(?=(\d\d)+\d$)/g, "$1,");
      num = n2 ? n1 + '.' + n2 : n1;
      return num;
    }
  }, {
    key: 'getCurrencySymbol',
    value: function getCurrencySymbol(currency) {
      switch (currency) {
        case 'INR':
          return '\u20B9';
        case 'USD':
          return '$';
      }
    }
  }, {
    key: 'renderPayHeadDetails',
    value: function renderPayHeadDetails(payhead, payHeadInformation, currency, totalPayheadValue) {
      var _this2 = this;

      if (payHeadInformation != null && payHeadInformation.length != 0) {

        return _react2.default.createElement(
          _ewaccordion2.default,
          {
            renderAccordionLabel: function renderAccordionLabel() {
              return _this2.getPayheadTitle(payhead, currency, totalPayheadValue);
            },
            isActive: this.isActiveAccordian(payhead),
            onAccordionPress: function onAccordionPress() {
              return _this2.setActiveAccordian(payhead);
            }
          },
          Object.keys(payHeadInformation).map(function (key) {
            return _react2.default.createElement(
              _reactNative.View,
              { style: { flexDirection: 'row', margin: 5 } },
              _react2.default.createElement(
                _reactNative.View,
                { style: { flex: 0.7 } },
                _react2.default.createElement(_ewh3text2.default, {
                  text: payHeadInformation[key].emp_comp_name
                }),
                _react2.default.createElement(_ewh4lighttext2.default, {
                  text: payHeadInformation[key].emp_comp_amount + " per " + payHeadInformation[key].frequency
                }),
                _this2.renderExtraPayheadDetails(payHeadInformation[key])
              ),
              _react2.default.createElement(
                _reactNative.View,
                { style: { alignItems: 'flex-end', flex: 0.3 } },
                _react2.default.createElement(_ewh3text2.default, {
                  text: _this2.getCurrencySymbol(currency) + " " + _this2.formatCurrencyIndianFormat(payHeadInformation[key].annualPayheadValue)
                })
              )
            );
          })
        );
      }
    }
  }, {
    key: 'renderExtraPayheadDetails',
    value: function renderExtraPayheadDetails(payhead) {

      switch (payhead.emp_comp_head_mapped_id) {

        case compensationConstants.COMPANY_CAR_EXPENSES_BY_EMPLOYEE:
        case compensationConstants.COMPANY_CAR_EXPENSES_BY_EMPLOYER:
        case compensationConstants.COMPANY_CAR_EMPLOYEE_LEASE_EXPENSES_BY_EMPLOYER:

          return _react2.default.createElement(
            _reactNative.View,
            null,
            _react2.default.createElement(_ewh4lighttext2.default, {
              text: compensationConstants.COMPANY_CAR_CAPACITY_LABEL + " - " + payhead.emp_comp_car_capacity_value
            }),
            _react2.default.createElement(_ewh4lighttext2.default, {
              text: compensationConstants.COMPANY_CAR_CHAUFFEUR_LABEL + " - " + payhead.emp_comp_chauffeur_provided_value
            })
          );
          break;

        case compensationConstants.COMPANY_LEASED_ACCOMODATION:
        case compensationConstants.COMPANY_OWNED_ACCOMODATION:

          return _react2.default.createElement(
            _reactNative.View,
            null,
            _react2.default.createElement(_ewh4lighttext2.default, {
              text: this.getAccomodationLabel(payhead)
            }),
            payhead.emp_comp_head_mapped_id == compensationConstants.COMPANY_LEASED_ACCOMODATION ? _react2.default.createElement(_ewh4lighttext2.default, {
              text: compensationConstants.MONTHLY_LEASE_AMOUNT_COMPANY_LABEL + " - " + payhead.emp_comp_lease_rent_value
            }) : null,
            _react2.default.createElement(_ewh4lighttext2.default, {
              text: compensationConstants.MONTHLY_RENT_PAID_BY_EMPLOYEE_LABEL + " - " + payhead.emp_comp_rent_paid_value
            }),
            _react2.default.createElement(_ewh4lighttext2.default, {
              text: this.getLocationLabel(payhead) + " - " + payhead.emp_comp_city_category_location
            })
          );

          break;

        default:

      }
    }
  }, {
    key: 'getAccomodationLabel',
    value: function getAccomodationLabel(payhead) {

      if (payhead.emp_comp_head_mapped_id == compensationConstants.COMPANY_LEASED_ACCOMODATION) return compensationConstants.COMPANY_LEASED_ACCOMODATION_LABEL;

      return compensationConstants.COMPANY_OWNED_ACCOMODATION_LABEL;
    }
  }, {
    key: 'getLocationLabel',
    value: function getLocationLabel(payhead) {

      if (payhead.emp_comp_head_mapped_id == compensationConstants.COMPANY_LEASED_ACCOMODATION) return compensationConstants.RENTED_PROPERTY_REMOTE_LOCATION_LABEL;

      return compensationConstants.LOCATION_OF_PROPERTY_LABEL;
    }
  }, {
    key: 'isStringType',
    value: function isStringType(value) {

      if (value == "") return true;

      return false;
    }
  }, {
    key: 'getPayheadAnnualInfo',
    value: function getPayheadAnnualInfo(payheadValue, frequencyText) {

      frequency = "";
      annualValue = 0;

      console.log("frequencyText", frequencyText);

      switch (frequencyText) {
        case compensationConstants.SERVER_FREQUENCY_MONTHLY:

          frequency = compensationConstants.FREQUENCY_MONTHLY_LABEL;

          if (!this.isStringType(payheadValue)) annualValue = parseInt(payheadValue * compensationConstants.MULTIPLIER_MONTH);

          break;

        case compensationConstants.SERVER_FREQUENCY_QUARTERLY:

          frequency = compensationConstants.FREQUENCY_QUARTERLY_LABEL;

          if (!this.isStringType(payheadValue)) annualValue = parseInt(payheadValue * compensationConstants.MULTIPLIER_QUARTER);

          break;

        case compensationConstants.SERVER_FREQUENCY_YEARLY:

          frequency = compensationConstants.FREQUENCY_YEARLY_LABEL;

          if (!this.isStringType(payheadValue)) annualValue = parseInt(payheadValue * compensationConstants.MULTIPLIER_YEAR);

          break;
        default:

      }

      console.log("frequencyText", frequency);

      payheadAnnualInfo = {

        frequency: frequency,
        annualValue: annualValue

      };

      return payheadAnnualInfo;
    }
  }, {
    key: 'calculateSalary',
    value: function calculateSalary(payhead) {

      salary = 0;

      if (payhead.emp_comp_frequency == compensationConstants.SERVER_FREQUENCY_MONTHLY && payhead.emp_comp_amount != "") {

        salary = parseInt(payhead.emp_comp_amount);
      }

      return salary;
    }
  }, {
    key: 'handleError',
    value: function handleError(errorMessage) {

      console.log(FILE_NAME + "In handleError");
      console.log("this.state.currentError", this.state.currentError);

      tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

      switch (this.state.currentError) {

        case globalErrors.AUTHENTICATION_FAILURE:
          this.showAlertMessage("Session expired, Please login again");
          _reactNativeRouterFlux.Actions.ewlogin();
          return null;
          break;

        case globalErrors.LOCAL_SERVER_ACCESS_ERROR:
          this.showAlertMessage();

          if (!this.state.isDataPreLoaded) {
            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
          if (this.state.isDataPreLoaded && !this.state.isDone) {
            return this.renderScreen();
          }


          break;

        case compensationError.INVALID_STATE:
          _reactNativeRouterFlux.Actions.pop();
          return null;
          break;

      }

      if (!this.state.isDataPreLoaded) {
        return null;
      }

      if (this.state.isDataPreLoaded && !this.state.isDone) {

        switch (errorMessage) {

          case compensationError.SERVER_EXCEPTION:
            this.showAlertMessage(compensationError.SERVER_ERROR);
            return this.renderScreen();
            break;

          default:
            this.showAlertMessage();
            return this.renderScreen();}
      }
    }
  }]);
  return EwMyCompensation;
}(_react.Component);

function bindAction(dispatch) {

  console.log(FILE_NAME + "In bindAction");

  return {

    getMyCompensationInformation: function getMyCompensationInformation(params) {
      return dispatch((0, _compensationactions.getMyCompensationInformation)(params));
    },
    clearCompensationError: function clearCompensationError(params) {
      return dispatch((0, _compensationactions.clearCompensationError)(params));
    },

    clearCompensationStateData: function clearCompensationStateData(params) {
      return dispatch((0, _compensationactions.clearCompensationStateData)(params));
    },
    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    }

  };
}

var mapStateToProps = function mapStateToProps(state) {
  return {
    isLoggedIn: state.auth.isLoggedIn,
    sessionToken: state.auth.sessionToken,

    myCompensationData: state.compensation.myCompensationData,
    myCompensationError: state.compensation.myCompensationError,

    errorCounter: state.compensation.errorCounter
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindAction)(EwMyCompensation);