Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _nativeBase = require('native-base');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _GoogleAnalyticController = require('../../GoogleAnalyticController');

var _utils = require('../../utils');

var _ewloginstyles = require('./styles/ewloginstyles');

var _ewloginstyles2 = babelHelpers.interopRequireDefault(_ewloginstyles);

var _ewloadingindicator = require('../../components/ewloadingindicator/ewloadingindicator');

var _ewloadingindicator2 = babelHelpers.interopRequireDefault(_ewloadingindicator);

var _ewfloatinglabel = require('../../components/ewfloatinglabel/ewfloatinglabel');

var _ewfloatinglabel2 = babelHelpers.interopRequireDefault(_ewfloatinglabel);

var _ewdashboard = require('../dashboard/ewdashboard');

var _ewdashboard2 = babelHelpers.interopRequireDefault(_ewdashboard);

var _authactions = require('../../services/auth/authactions');

var _draweractions = require('../../services/drawer/draweractions');

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _commonactions = require('../../services/common/commonactions');

var _animationutils = require('../../utils/animationutils');

var animationUtils = babelHelpers.interopRequireWildcard(_animationutils);

var _authutils = require('./authutils');

var authConstants = babelHelpers.interopRequireWildcard(_authutils);

var ewLogoIcon = require('../../../img/ew_logo.png');

var FILE_NAME = "ewlogin.js : ";

var SCREEN_NAME = "Login Screen";

var SCREEN_CATEGORY = modules.MODULE_AUTHENTICATION;

var tracker = _GoogleAnalyticController.googleAnalyticController.getGoogleAnlyticTracker();

var EwLogin = function (_Component) {
  babelHelpers.inherits(EwLogin, _Component);

  function EwLogin(props) {
    babelHelpers.classCallCheck(this, EwLogin);

    var _this = babelHelpers.possibleConstructorReturn(this, (EwLogin.__proto__ || Object.getPrototypeOf(EwLogin)).call(this, props));

    _this._keyboardDidShow = function (event) {

      _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.screenHeight, {
        duration: 300,
        toValue: _utils.DEVICE_HEIGHT - event.endCoordinates.height - 30
      }), _reactNative.Animated.timing(_this.state.imageSize, {
        duration: 300,
        toValue: 45
      })]).start();
    };

    _this._keyboardDidHide = function (event) {

      _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.screenHeight, {
        duration: 300,
        toValue: _utils.DEVICE_HEIGHT
      }), _reactNative.Animated.timing(_this.state.imageSize, {
        duration: 300,
        toValue: 60
      })]).start();
    };

    _this.showResetButton = function () {

      if (_this.state.isResetButtonVisible) {

        return _react2.default.createElement(
          _nativeBase.Button,
          {
            style: _ewloginstyles2.default.loginButtonStyle,
            onPress: function onPress() {
              return _this.resetLogin();
            }
          },
          _react2.default.createElement(
            _nativeBase.Text,
            { style: _ewloginstyles2.default.loginTextStyle },
            'Reset'
          )
        );
      }
    };

    _this.showAlertMessage = function (messageText) {

      console.log(FILE_NAME + "In showAlertMessage method");
      console.log("AlertMessage is - ", _this.state.currentError);

      if (messageText === undefined) messageText = _this.state.currentError;
      messageHeading = 'Oops';
      messageType = 'error';

      if ((_this.state.isCustomerCodeRequired || _this.state.isEmpCodeRequired) && _this.state.custCode == '' && _this.state.empCode == '' && _this.state.currentError != '') {
        console.log("Inside 1 case testing");

        messageType = 'info';
        messageHeading = 'Login';
      }

      if (!(_this.state.isCustomerCodeRequired || _this.state.isEmpCodeRequired) && _this.state.currentError != '') {

        messageText = _this.state.currentError != '' ? _this.state.currentError : "Invalid login details";

        console.log("Case 1");
      }

      if ((_this.state.isCustomerCodeRequired || _this.state.isEmpCodeRequired) && (_this.state.custCode != '' || _this.state.empCode != '') && _this.state.currentError != '') {

        messageText = _this.state.currentError != '' ? _this.state.currentError : "Invalid login details";

        console.log("Case 2");
      }

      if (_this.state.isDone && _this.state.currentError == '') {

        console.log("Action was completed successfully");

        messageText = "EmployWise Welcomes You!";

        messageHeading = 'Employwise';

        messageType = 'info';
      }

      message = {

        messageText: messageText,
        messageHeading: messageHeading,
        messageType: messageType
      };

      console.log("messagetodisplay", message);

      if (_this.state.currentError != '') _this.clearCurrentError();

      _this.props.showDropDownAlertMessage(message);
    };

    tracker.trackScreenView(SCREEN_NAME);

    console.log(FILE_NAME + "In constructor");

    screenHeight = new _reactNative.Animated.Value(_utils.DEVICE_HEIGHT);

    _this.initialState = {
      isDataPreLoaded: false,
      isLoading: false,
      isDone: false,
      currentError: '',

      emailId: _this.props.emailId,
      password: '',
      isPasswordVisible: true,

      isEmpCodeRequired: false,
      empCode: '',

      isCustomerCodeRequired: false,
      custCode: '',

      isResetButtonVisible: false,

      componentInitializeTime: new Date().getTime(),

      screenHeight: new _reactNative.Animated.Value(_utils.DEVICE_HEIGHT),

      imageSize: new _reactNative.Animated.Value(60)

    };

    _this.state = _this.initialState;

    return _this;
  }

  babelHelpers.createClass(EwLogin, [{
    key: 'componentWillMount',
    value: function componentWillMount() {

      console.log(FILE_NAME + "In componentWillMount");

      this.setState({
        isDataPreLoaded: true,
        isLoading: false
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      console.log(FILE_NAME + "In componentWillReceiveProps");
      console.log("New Props are - ", nextProps);

      if (nextProps.isLoggedIn && nextProps.emailId != '' && nextProps.userId != '' && nextProps.loginError == null && nextProps.loginData != null) {

        console.log(FILE_NAME + "Login is Successfull");

        this.setState({

          isDone: true,
          isLoading: false,
          currentError: ''

        });
      }

      if (nextProps.loginError != null) {

        if (nextProps.loginData != null) {

          if (nextProps.loginData.login_basis == null) {

            console.log(FILE_NAME + "Login Failed");

            this.setState({

              isDone: false,
              isLoading: false,
              currentError: nextProps.loginError

            });
          } else {

            switch (nextProps.loginData.login_basis) {

              case 'c':
                this.setState({
                  isDone: false,
                  isLoading: false,
                  isCustomerCodeRequired: true,
                  isResetButtonVisible: true,
                  currentError: "Customer Code Required"
                });
                break;

              case 'e':
                this.setState({
                  isDone: false,
                  isLoading: false,
                  isResetButtonVisible: true,
                  isEmpCodeRequired: true,
                  currentError: "Employee Code Required"
                });
                break;

              default:

            }
          }
        } else {
          this.setState({

            isDone: false,
            isLoading: false,
            currentError: nextProps.loginError

          });
        }
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextStat) {

      console.log(FILE_NAME + "In shouldComponentUpdate");
      console.log("New Props are - ", nextProps);
      console.log("New State is - ", nextStat);

      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {

      console.log(FILE_NAME + "In componentWillUpdate");
    }
  }, {
    key: 'render',
    value: function render() {

      console.log(FILE_NAME + "In render() method");

      if (!this.props.isLoggedIn) {

        console.log("Not Logged in");

        if (this.state.isLoading) {

          console.log("Loading is active, Authenticating...");

          return _react2.default.createElement(_ewloadingindicator2.default, { loadingText: 'Authenticating...' });
        } else {

          console.log("Loading is not active");

          if (this.state.isDataPreLoaded) {

            console.log("Date Pre-loading was successful");

            if (this.state.isDone && this.state.currentError == '') {

              console.log("Action was completed successfully");
              console.log("Moving to Dashboard...");

              _reactNativeRouterFlux.Actions.ewdashboard({ type: _reactNativeRouterFlux.ActionConst.REPLACE });
              return null;
            } else {

              console.log("Action has not been completed yet");

              if (this.state.currentError == '') {

                console.log("Render Screen");

                return this.renderScreen();
              } else {

                console.log("Render Screen with Error", this.state.currentError);

                tracker.trackScreenView(SCREEN_NAME + ' with Error - ' + this.state.currentError);

                this.showAlertMessage();

                return this.renderScreen();
              }
            }
          } else {

            console.log("Date Pre-loading failed with error -", this.state.currentError);

            _reactNativeRouterFlux.Actions.pop();
            return null;
          }
        }
      } else {

        console.log("Logged in");
        if (this.state.isDone && this.state.currentError == '') {
          console.log("New Login Session");

          this.showAlertMessage();
          {}
        }

        _reactNativeRouterFlux.Actions.ewdashboarddrawer({ type: _reactNativeRouterFlux.ActionConst.REPLACE });

        return null;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      console.log(FILE_NAME + "In componentDidMount");

      this.keyboardDidShowListener = _reactNative.Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
      this.keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      console.log(FILE_NAME + "In componentDidUpdate");
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      (0, _utils.trackComponentVisibleTimings)(this.state.componentInitializeTime, SCREEN_CATEGORY, SCREEN_NAME);
      this.keyboardDidShowListener.remove();
      this.keyboardDidHideListener.remove();

      console.log(FILE_NAME + "In componentWillUnmount");
    }
  }, {
    key: 'renderScreen',
    value: function renderScreen() {
      var _this2 = this;

      console.log(FILE_NAME + "In renderScreen method");

      return _react2.default.createElement(
        _nativeBase.Container,
        null,
        _react2.default.createElement(
          _nativeBase.Content,
          { keyboardShouldPersistTaps: 'always' },
          _react2.default.createElement(
            _reactNative.Animated.View,
            { style: {
                height: this.state.screenHeight,
                justifyContent: 'center'
              } },
            _react2.default.createElement(
              _reactNative.View,
              { style: { alignItems: 'center' } },
              _react2.default.createElement(_reactNative.Animated.Image, { style: { height: this.state.imageSize, width: this.state.imageSize }, source: ewLogoIcon })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: _ewloginstyles2.default.formContainer },
              _react2.default.createElement(_ewfloatinglabel2.default, {
                label: 'Email ID Or Mobile Number',
                keyboardType: 'email-address',
                autoCorrect: false,
                autoCapitalize: 'none',
                onChangeText: function onChangeText(emailId) {
                  return _this2.setState({ emailId: emailId });
                },
                value: this.state.emailId
              }),
              _react2.default.createElement(
                _reactNative.View,
                { style: { marginTop: 10 } },
                _react2.default.createElement(_ewfloatinglabel2.default, {

                  label: 'Password',
                  onChangeText: function onChangeText(password) {
                    return _this2.setState({ password: password });
                  },
                  value: this.state.password,
                  secureTextEntry: this.state.isPasswordVisible
                }),
                _react2.default.createElement(
                  _reactNative.View,
                  { style: { position: 'absolute', right: 10, marginTop: 15, marginLeft: 10,
                      justifyContent: 'flex-end',
                      alignItems: 'flex-end'
                    } },
                  _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    { onPress: function onPress() {
                        return _this2.setState({ isPasswordVisible: !_this2.state.isPasswordVisible });
                      } },
                    _react2.default.createElement(_nativeBase.Icon, { name: 'eye' })
                  )
                )
              ),
              this.showEmployeeCodeInputField(),
              this.showCustomerCodeInputField()
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: { flexDirection: "row", justifyContent: "space-around" } },
              this.showResetButton(),
              _react2.default.createElement(
                _nativeBase.Button,
                {
                  style: _ewloginstyles2.default.loginButtonStyle,
                  onPress: function onPress() {
                    return _this2.onPressLogin();
                  }
                },
                _react2.default.createElement(
                  _nativeBase.Text,
                  { style: _ewloginstyles2.default.loginTextStyle },
                  'Login'
                )
              )
            )
          )
        )
      );
    }
  }, {
    key: 'clearCurrentError',
    value: function clearCurrentError() {

      this.setState({
        currentError: ''
      });

      this.props.clearAuthError(null);
    }
  }, {
    key: 'showEmployeeCodeInputField',
    value: function showEmployeeCodeInputField() {
      var _this3 = this;

      console.log(FILE_NAME + "In showEmployeeCodeInputField method");

      if (this.state.isEmpCodeRequired) {

        return _react2.default.createElement(_ewfloatinglabel2.default, {

          autoFocus: true,
          label: 'Employee Code',
          autoCorrect: false,
          onChangeText: function onChangeText(empCode) {
            return _this3.setState({ empCode: empCode });
          },
          value: this.state.empCode
        });
      }
    }
  }, {
    key: 'showCustomerCodeInputField',
    value: function showCustomerCodeInputField() {
      var _this4 = this;

      console.log(FILE_NAME + "In showCustomerCodeInputField method");

      if (this.state.isCustomerCodeRequired) {

        return _react2.default.createElement(_ewfloatinglabel2.default, {

          autoFocus: true,
          label: 'Customer Code',
          autoCorrect: false,
          onChangeText: function onChangeText(custCode) {
            return _this4.setState({ custCode: custCode });
          },
          value: this.state.custCode
        });
      }
    }
  }, {
    key: 'localValidation',
    value: function localValidation(params) {

      console.log(FILE_NAME + " : In localValidation method");

      if (params.emailId == '') {

        this.showAlertMessage(authConstants.EMAIL_OR_MOBILE_EMPTY);

        return false;
      } else if (params.password == '') {

        this.showAlertMessage(authConstants.PASSWORD_EMPTY);

        return false;
      } else if (this.state.isEmpCodeRequired && params.empCode == '') {

          this.showAlertMessage(authConstants.EMPLOYEE_CODE_EMPTY);

          return false;
        } else if (this.state.isCustomerCodeRequired && params.custCode == '') {

            this.showAlertMessage(authConstants.CUSTOMER_CODE_EMPTY);

            return false;
          } else if ((0, _utils.isNumber)(params.emailId) && params.emailId.length < authConstants.DEFAULT_MOBILE_NUMBER_LENGTH) {

            this.showAlertMessage(authConstants.EMAIL_OR_MOBILE_INVALID);

            return false;
          } else if (!(0, _utils.isNumber)(params.emailId) && !(0, _utils.isEmailId)(params.emailId)) {

            this.showAlertMessage(authConstants.EMAIL_OR_MOBILE_INVALID);

            return false;
          } else {
            return true;
          }
    }
  }, {
    key: 'resetLogin',
    value: function resetLogin() {

      console.log(FILE_NAME + " : In resetLogin method");

      this.setState({
        emailId: '',
        password: '',

        isEmpCodeRequired: false,
        empCode: '',

        isCustomerCodeRequired: false,
        custCode: '',

        isResetButtonVisible: false

      });
    }
  }, {
    key: 'onPressLogin',
    value: function onPressLogin() {

      console.log(FILE_NAME + " : In onPressLogin method");
      console.log("Login Button Pressed - Email-id is - " + this.state.emailId + " Password is - " + this.state.password);

      var params = {
        emailId: this.state.emailId.trim(),
        password: this.state.password.trim(),
        custCode: this.state.custCode.trim(),
        empCode: this.state.empCode.trim()
      };

      if (this.localValidation(params)) {
        if (params.empCode != '') {
          tracker.trackEvent(SCREEN_CATEGORY, 'Login With Emp Code');
        } else if (params.custCode != '') {
          tracker.trackEvent(SCREEN_CATEGORY, 'Login With Cust Code');
        } else {
          tracker.trackEvent(SCREEN_CATEGORY, 'Login');
        }

        this.props.performLogin(params);

        this.setState({
          isLoading: true,
          isDone: false
        });
      }
    }
  }, {
    key: 'onPressBack',
    value: function onPressBack() {}
  }]);
  return EwLogin;
}(_react.Component);

EwLogin.propTypes = {
  openDrawer: _react2.default.PropTypes.func,

  isLoggedIn: _react2.default.PropTypes.bool,
  emailId: _react2.default.PropTypes.string,
  userId: _react2.default.PropTypes.string,
  errorWebService: _react2.default.PropTypes.string
};

function bindActions(dispatch) {

  console.log(FILE_NAME + "In bindActions function");

  return {
    performLogin: function performLogin(params) {
      return dispatch((0, _authactions.performLogin)(params));
    },
    showDropDownAlertMessage: function showDropDownAlertMessage(params) {
      return dispatch((0, _commonactions.showDropDownAlertMessage)(params));
    },
    clearAuthError: function clearAuthError(params) {
      return dispatch((0, _authactions.clearAuthError)(params));
    }
  };
}

function mapStateToProps(state) {

  console.log(FILE_NAME + "In mapStateToProps function");
  console.log("State Updated state is -");
  console.log(state);

  return {
    drawerState: state.drawer.drawerState,
    themeState: state.drawer.themeState,

    isLoggedIn: state.auth.isLoggedIn,
    loginError: state.auth.loginError,
    loginData: state.auth.loginData,
    emailId: state.auth.emailId,
    userId: state.auth.userId,
    isStoredSessionLoaded: state.auth.isStoredSessionLoaded,
    authErrorCounter: state.auth.errorCounter

  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, bindActions)(EwLogin);