'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require('react-native');

var locationSwitchModule = _reactNative.NativeModules.RNReactNativeLocationSwitch;

var APP_STATE_HANDLER_NAME = 'change';

var sSuccessCallback = void 0;
var sErrorCallback = void 0;

function handleAppStateChange(nextAppState) {
  if (_reactNative.Platform.OS === 'ios' && nextAppState === 'active') {
    removeAppStateListener();
    locationSwitchModule.isLocationEnabled(onIOSSuccessCallback, onIOSErrorCallback);
  }
}

function removeAppStateListener() {
  if (_reactNative.Platform.OS === 'ios') {
    _reactNative.AppState.removeEventListener(APP_STATE_HANDLER_NAME, handleAppStateChange);
  }
}

function addAppStateListener() {
  if (_reactNative.Platform.OS === 'ios') {
    _reactNative.AppState.addEventListener(APP_STATE_HANDLER_NAME, handleAppStateChange);
  }
}

function onIOSSuccessCallback() {
  removeAppStateListener();
  if (sSuccessCallback) {
    sSuccessCallback();
  }
}

function onIOSErrorCallback() {
  removeAppStateListener();
  if (sErrorCallback) {
    sErrorCallback();
  }
}

var LocationSwitch = {
  isLocationEnabled: function isLocationEnabled(successCallback, errorCallback) {
    if (_reactNative.Platform.OS === 'ios') {
      locationSwitchModule.isLocationEnabled(successCallback, errorCallback);
    } else {
      locationSwitchModule.isLocationEnabled(successCallback, errorCallback);
    }
  },
  enableLocationService: function enableLocationService(interval, requestHighAccuracy, successCallback, errorCallback) {
    if (_reactNative.Platform.OS === 'ios') {
      sSuccessCallback = successCallback;
      sErrorCallback = errorCallback;

      addAppStateListener();
      locationSwitchModule.enableLocationService(onIOSSuccessCallback, onIOSErrorCallback);
    } else {
      locationSwitchModule.enableLocationService(interval, requestHighAccuracy, successCallback, errorCallback);
    }
  }
};

exports.default = LocationSwitch;