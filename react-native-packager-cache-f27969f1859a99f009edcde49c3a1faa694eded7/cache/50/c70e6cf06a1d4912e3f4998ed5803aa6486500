Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOthersClaimModel = getOthersClaimModel;
exports.getOthersComponentConfigurationModel = getOthersComponentConfigurationModel;
exports.getServerOthersLineItemModel = getServerOthersLineItemModel;
exports.getServerOthersLineItemDeleteModel = getServerOthersLineItemDeleteModel;
exports.getSubmitOthersExpenseClaimModel = getSubmitOthersExpenseClaimModel;

var _utils = require('../../../utils');

var _datetimeutils = require('../../../utils/datetimeutils');

function getOthersClaimModel(serverData) {

  defaultExpenseType = {

    "label": "Select Expense Type",
    "value": -1
  };

  expenseHeadCounter = 1;

  expenseTypes = [];
  expenseTypes.push(defaultExpenseType);

  for (var _iterator = serverData.expenseHeadsList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var expenseHead = _ref;


    var expenseType = {
      label: expenseHead.expenseType_Name,
      value: expenseHeadCounter,
      expenseTypeId: expenseHead.expenseType_Id,
      isApplicableToEmployee: expenseHead.isApplicableToEmployee,
      taxAmountRequired: expenseHead.tax_AMOUNT_REQUIRED,
      taxAmountType: expenseHead.tax_AMOUNT

    };

    expenseHeadCounter += 1;

    expenseTypes.push(expenseType);
  }

  defaultCurrency = {

    "label": "Select Currency",
    "value": -1
  };

  othersCurrencyList = [];
  othersCurrencyList.push(defaultCurrency);

  currencyIndex = 1;

  for (var _iterator2 = serverData.currencyinfo, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var currency = _ref2;


    if (currency != null) {

      var otherCurrency = {

        label: currency.currency_Symbol,
        value: currencyIndex,
        conversionRate: currency.conv_rate,
        currencyId: currency.currency_Id
      };

      othersCurrencyList.push(otherCurrency);

      currencyIndex++;
    }
  }

  paymentModeList = [];

  var defaultPaymentMode = {

    label: "Select Payment Mode",
    value: -1
  };

  paymentModeList.push(defaultPaymentMode);
  paymentModeIndex = 1;

  for (var _iterator3 = serverData.paymentmodeinfo, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var paymentMode = _ref3;


    var paymentModel = {

      label: paymentMode.pm_MODE_NAME,
      value: paymentModeIndex,
      paymentModeId: paymentMode.pm_ID
    };

    paymentModeList.push(paymentModel);
    paymentModeIndex++;
  }

  var clientData = {

    expenseTypes: expenseTypes,
    baseCurrency: serverData.baseCurrency.currency_Id,
    bu_id: serverData.bu_id,
    company_id: serverData.company_id,
    emp_costcenter_id: serverData.emp_costcenter_id,
    function_id: serverData.function_id,
    grade_id: serverData.grade_id,
    location_id: serverData.location_id,
    paymentModes: paymentModeList,
    projectAssigned: serverData.projectAssigned,
    projectRequired: serverData.projectRequired,
    project_selection_mandatory: serverData.project_selection_mandatory,
    expenseSetupInfo: serverData.expenseSetupInfo,
    othersCurrencyInfo: othersCurrencyList

  };

  return clientData;
}

function getOthersComponentConfigurationModel(serverData) {
  var firstDomesticexpenseapprovalinfo = serverData.firstDomesticexpenseapprovalinfo,
      secondDomesticexpenseapprovalinfo = serverData.secondDomesticexpenseapprovalinfo;


  defaultApprover = {

    "label": "Select First Approver",
    "value": -1

  };

  defaultSecondApprover = {

    "label": "Select Second Approver",
    "value": -1

  };

  if (serverData.firstDomesticexpenseapprovalinfo != null && serverData.firstDomesticexpenseapprovalinfo.approvalinfo != null) {

    serverData.firstDomesticexpenseapprovalinfo.approvalinfo = [defaultApprover].concat(babelHelpers.toConsumableArray(serverData.firstDomesticexpenseapprovalinfo.approvalinfo));

    for (var _iterator4 = serverData.firstDomesticexpenseapprovalinfo.approvalinfo, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var approver = _ref4;


      if (approver.value == null) {

        approver.label = approver.userName;
        approver.value = approver.userId;
      }
    }
  }

  if (serverData.secondDomesticexpenseapprovalinfo != null && serverData.secondDomesticexpenseapprovalinfo.approvalinfo != null) {

    serverData.secondDomesticexpenseapprovalinfo.approvalinfo = [defaultSecondApprover].concat(babelHelpers.toConsumableArray(serverData.secondDomesticexpenseapprovalinfo.approvalinfo));

    for (var _iterator5 = serverData.secondDomesticexpenseapprovalinfo.approvalinfo, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var approver = _ref5;


      if (approver.value == null) {

        approver.label = approver.userName;
        approver.value = approver.userId;
      }
    }
  }

  isMonthlyClaim = serverData.firstDomesticexpenseapprovalinfo == null ? 0 : serverData.firstDomesticexpenseapprovalinfo.is_monthly_claim;
  customExpenseTypes = serverData.firstDomesticexpenseapprovalinfo == null ? [] : serverData.firstDomesticexpenseapprovalinfo.expensetypefieldsList;
  monthlyData = serverData.firstDomesticexpenseapprovalinfo == null ? [] : serverData.firstDomesticexpenseapprovalinfo.dateArray;

  clientMonthlyData = [];

  if (monthlyData.length != 0) {

    var defaultMonth = {

      label: "Select Expense Date",
      value: -1
    };

    clientMonthlyData.push(defaultMonth);

    monthIndex = 1;

    for (var _iterator6 = monthlyData, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var monthName = _ref6;


      var monthModel = {

        label: getFormattedDateLabel(monthName),
        value: monthIndex
      };

      clientMonthlyData.push(monthModel);

      monthIndex++;
    }
  }

  if (customExpenseTypes.length != 0) {

    for (var _iterator7 = customExpenseTypes, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref7;

      if (_isArray7) {
        if (_i7 >= _iterator7.length) break;
        _ref7 = _iterator7[_i7++];
      } else {
        _i7 = _iterator7.next();
        if (_i7.done) break;
        _ref7 = _i7.value;
      }

      var customExpenseType = _ref7;


      customExpenseType.value = "";
      customExpenseType.label = customExpenseType.exptypefield_name;
      customExpenseType.placeholderLabel = "Enter " + customExpenseType.label;
    }
  }
  var firstApprovalInfo = {

    "approvalinfo": serverData.firstDomesticexpenseapprovalinfo.approvalinfo,
    "forAllRequest": serverData.firstDomesticexpenseapprovalinfo.forAllRequest
  };

  var secondApprovalInfo = {

    "approvalinfo": serverData.secondDomesticexpenseapprovalinfo.approvalinfo,
    "forAllRequest": serverData.secondDomesticexpenseapprovalinfo.forAllRequest
  };

  var clientModel = {

    firstApprovalInfo: firstApprovalInfo,
    secondApprovalInfo: secondApprovalInfo,
    isMonthlyClaim: isMonthlyClaim,
    customExpenseTypes: customExpenseTypes,
    monthlyData: clientMonthlyData
  };

  return clientModel;
}

function getFormattedDateLabel(monthName) {

  var date = monthName.split("-");
  formattedDate = (0, _datetimeutils.getMonthName)(parseInt(date[0]) - 1) + ", " + date[1];

  return formattedDate;
}

function getServerOthersLineItemModel(serverData, getState) {

  var params = {
    "expenses": {
      "exp_data": {
        "exp_details": {
          "lineitem": {

            "li_invoice_date": serverData.invoiceDate,
            "li_claim_amt": serverData.postTaxAmount,
            "li_claimed_sgst_rate": serverData.sgstRate,
            "li_claimed_sgst_amount": serverData.sgstAmount,

            "li_claimed_cgst_rate": serverData.cgstRate,
            "li_claimed_cgst_amount": serverData.cgstAmount,

            "li_claimed_igst_rate": serverData.igstRate,
            "li_claimed_igst_amount": serverData.igstAmount,

            "li_tax_amt": serverData.taxAmount,
            "li_gstin_number": serverData.gstNumber,
            "li_inv_no": serverData.invoiceNumber,
            "li_pre_tax_amt": serverData.preTaxAmount,

            "li_exp_id": serverData.expenseid,
            "li_date": serverData.expenseDate,
            "li_mode_id": serverData.expenseType,
            "li_grade_id": serverData.gradeId,
            "li_company_id": serverData.companyId,
            "li_function_id": serverData.functionId,
            "li_business_unit_id": serverData.businessUnitId,
            "li_location_id": serverData.locationId,
            "li_costcenter_id": serverData.costCenterId,
            "li_curr_id": serverData.currency,
            "li_payment_mode": serverData.paymentMode,
            "li_exrate": serverData.exchangeRate

          }
        },
        "token": getState.auth.sessionToken,
        "device_id": serverData.device_id,
        "scope": "I"
      }
    },
    "expenseApiMode": "saveOtherLineItem"
  };

  if (serverData.customExpenseTypes.length != 0) {

    params.expenses.exp_data.exp_details.lineitem.li_other_field_value = serverData.customExpenseTypes[0].value;
  }

  if (serverData.logId != null) {

    params.expenses.exp_data.exp_details.lineitem.li_log_id = serverData.logId;
    params.expenseApiMode = "updateOtherLineItem";
  }

  if (serverData.comments != null) {

    commentArray = [];

    for (var _iterator8 = serverData.comments, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref8;

      if (_isArray8) {
        if (_i8 >= _iterator8.length) break;
        _ref8 = _iterator8[_i8++];
      } else {
        _i8 = _iterator8.next();
        if (_i8.done) break;
        _ref8 = _i8.value;
      }

      var commentData = _ref8;


      var commentModel = {

        "comment": commentData,
        "comment_by": getState.auth.userId
      };

      commentArray.push(commentModel);
    }

    params.expenses.exp_data.exp_details.lineitem.Comment_details = {};
    params.expenses.exp_data.exp_details.lineitem.Comment_details.Comment_details_line_item = commentArray;
  }

  if (serverData.deviationComment != null) params.expenses.exp_data.exp_details.lineitem.li_deviation_comment = serverData.deviationComment;

  if (serverData.invoiceImage != null) params.expenses.exp_data.exp_details.lineitem.file = serverData.invoiceImage.imageData;

  if (serverData.projectDetails != null) {

    projectArray = [];

    for (var _iterator9 = projectDetails, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref9;

      if (_isArray9) {
        if (_i9 >= _iterator9.length) break;
        _ref9 = _iterator9[_i9++];
      } else {
        _i9 = _iterator9.next();
        if (_i9.done) break;
        _ref9 = _i9.value;
      }

      var project = _ref9;


      if (project.selectedProjectData != null) {

        var projectModel = {

          "project_id": project.selectedProjectData.projectId,
          "project_code": project.selectedProjectData.projectCode,
          "assigned": project.selectedProjectData.assigned,
          "amount": project.projectAmount

        };

        projectArray.push(projectModel);
      }
    }

    serverProjectModel = {

      "Allocation_project_details": projectArray
    };

    params.expenses.exp_data.exp_details.lineitem.Allocation_project = serverProjectModel;
  }

  console.log("stringifiedjsojn", JSON.stringify(params));
  return params;
}

function getServerOthersLineItemDeleteModel(clientData) {

  var params = {

    "expenses": {
      "exp_data": {
        "exp_details": {
          "lineitem": {

            "li_exp_id": clientData.expenseId,
            "li_log_id": clientData.lineitemId

          }

        },

        "token": clientData.token,
        "device_id": clientData.deviceId,
        "scope": "I"

      }

    }

  };

  return params;
}

function getSubmitOthersExpenseClaimModel(clientData) {

  var params = {

    "expenses": {
      "exp_data": {

        "exp_id": clientData.expenseId,
        "preorpost_tax": clientData.preorposttax,
        "exp_approver_id": clientData.approverId,
        "token": clientData.token,
        "device_id": clientData.deviceId,
        "scope": "I",
        "status": "Pending Approval"

      }

    }

  };

  if (clientData.approverId2 != null) {

    params.expenses.exp_data.approver_id2 = clientData.approverId2;
  }

  if (clientData.deviationComment != null) params.expenses.exp_data.time_based_deviation_comment = clientData.deviationComment;

  return params;
}