Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEmployeesList = getEmployeesList;
exports.getMyTeamEmployeesList = getMyTeamEmployeesList;
exports.clearEipError = clearEipError;
exports.cleareEipStateData = cleareEipStateData;

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _eipprocessing = require('./eipprocessing');

var eipProcessing = babelHelpers.interopRequireWildcard(_eipprocessing);

var _eipactiontypes = require('./eipactiontypes');

var eipActionTypes = babelHelpers.interopRequireWildcard(_eipactiontypes);

var _utils = require('../../utils');

var _modulelist = require('../../utils/modulelist');

var modules = babelHelpers.interopRequireWildcard(_modulelist);

var _globalerrors = require('../../utils/globalerrors');

var globalErrors = babelHelpers.interopRequireWildcard(_globalerrors);

var FILE_NAME = "eipactions.js : ";

var SCREEN_CATEGORY = modules.MODULE_EMPLOYEE_INFORMATION_PORTAL;

function getEmployeesList(params) {

  console.log(FILE_NAME + "In getEmployeesList method - ");
  console.log("params - ", params);

  return function (dispatch, getState) {

    var getEmployeesList = eipProcessing.buildGetEmployeesListRequest(params, getState());

    console.log("Current GetState Value is - ", getState);

    requestStartTime = (0, _utils.getCurrentTime)();

    _axios2.default.get(getEmployeesList.url, getEmployeesList.data, getEmployeesList.config).then(function (result) {

      console.log("getEmployeesList Result - ", result);

      if (result.data != null) {

        (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getEmployeesList', _utils.REQUEST_SUCCESSFULL);

        dispatch({
          type: eipActionTypes.SUCCESS_GET_EMPLOYEES_LIST,
          response: eipProcessing.buildSuccessGetEmployeesListResponse(result, params)
        });
      } else {

        (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getEmployeesList', _utils.REQUEST_FAILED);

        dispatch({
          type: eipActionTypes.FAILURE_GET_EMPLOYEES_LIST,
          response: eipProcessing.buildFailedGetEmployeesListResponse(result, params)
        });
      }
    }).catch(function (err) {

      (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getEmployeesList', _utils.REQUEST_SERVER_ERROR);

      globalErrors.updateLocalServerAccessError(getState().auth.isNetworkConnected);

      console.log("getEmployeesList Error - ", err);

      dispatch({
        type: eipActionTypes.FAILURE_GET_EMPLOYEES_LIST,
        response: eipProcessing.buildServerErrorGetEmployeesListResponse(err, params)
      });
    });
  };
}

function getMyTeamEmployeesList(params) {

  console.log(FILE_NAME + "In getMyTeamEmployeesList method - ");
  console.log("params - ", params);

  return function (dispatch, getState) {

    var getMyTeamEmployeesList = eipProcessing.buildGetMyTeamEmployeesListRequest(params, getState());

    console.log("Current GetState Value is - ", getState);

    requestStartTime = (0, _utils.getCurrentTime)();

    _axios2.default.get(getMyTeamEmployeesList.url, getMyTeamEmployeesList.data, getMyTeamEmployeesList.config).then(function (result) {

      console.log("getMyTeamEmployeesList Result - ", result);

      if (result.data != null) {

        (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getMyTeamEmployeesList', _utils.REQUEST_SUCCESSFULL);

        dispatch({
          type: eipActionTypes.SUCCESS_GET_MY_TEAM_EMPLOYEES_LIST,
          response: eipProcessing.buildSuccessGetMyTeamEmployeesListResponse(result, params)
        });
      } else {

        (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getMyTeamEmployeesList', _utils.REQUEST_FAILED);

        dispatch({
          type: eipActionTypes.FAILURE_GET_MY_TEAM_EMPLOYEES_LIST,
          response: eipProcessing.buildFailedGetMyTeamEmployeesListResponse(result, params)
        });
      }
    }).catch(function (err) {

      (0, _utils.trackServerRequestTimings)(requestStartTime, SCREEN_CATEGORY, 'getMyTeamEmployeesList', _utils.REQUEST_SERVER_ERROR);

      console.log("getMyTeamEmployeesList Error - ", err);

      dispatch({
        type: eipActionTypes.FAILURE_GET_MY_TEAM_EMPLOYEES_LIST,
        response: eipProcessing.buildServerErrorGetMyTeamEmployeesListResponse(err, params)
      });
    });
  };
}

function clearEipError(params) {

  return {
    type: eipActionTypes.CLEAR_EIP_ERROR,
    response: null
  };
}

function cleareEipStateData(params) {

  console.log(FILE_NAME + "In cleareEipStateData - ");
  console.log("Type of Data to be cleared - ", params);

  CLEAR_STATE_DATA_ALL = 'CLEAR_STATE_DATA_ALL';
  CLEAR_STATE_ERROR_COUNTER = 'CLEAR_STATE_ERROR_COUNTER';

  return function (dispatch, getState) {

    console.log("Current GetState Value is - ", getState());

    var errorCounter = getState().eip.errorCounter;
    var employeesInformationData = getState().eip.employeesInformationData;
    var employeesInformationError = getState().eip.employeesInformationError;

    Object.keys(params).map(function (key) {
      console.log("params attribute " + key + " value is - " + params[key]);

      switch (params[key]) {
        case CLEAR_STATE_DATA_ALL:

          errorCounter = null;
          employeesInformationData = null;
          employeesInformationError = null;
          break;

        case CLEAR_STATE_ERROR_COUNTER:

          errorCounter = null;
          break;

        default:

      }
    });

    var response = {
      errorCounter: errorCounter,
      employeesInformationData: employeesInformationData,
      employeesInformationError: employeesInformationError
    };

    dispatch({
      type: eipActionTypes.CLEAR_EIP_STATE_DATA,
      response: response
    });
  };
}